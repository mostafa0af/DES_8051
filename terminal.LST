C51 COMPILER V9.02   TERMINAL                                                              07/14/2015 21:42:20 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE TERMINAL
OBJECT MODULE PLACED IN terminal.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE terminal.c BROWSE DEBUG OBJECTEXTEND CODE LISTINCLUDE

line level    source

   1          /*
   2          **********************************************************************************************************
             -***
   3          *                                        UART Communication
   4          
   5          * File : UART.C
   6          * By   : github.com
   7          **********************************************************************************************************
             -***
   8          */
   9          #include "TERMINAL.H"
   1      =1  #ifndef TERMINAL_h
   2      =1  #define TERMINAL_h
   3      =1  
   4      =1  #include "datatypes.h"
   1      =2  #ifndef datatypes_h
   2      =2  #define datatypes_h
   3      =2  
   4      =2  typedef signed char             int8_t;
   5      =2  typedef unsigned char           uint8_t;
   6      =2  typedef short                           int16_t;
   7      =2  typedef unsigned short          uint16_t;
   8      =2  typedef long int                        int32_t;
   9      =2  typedef unsigned long int       uint32_t;
  10      =2  typedef uint32_t                        uint64_t[2];
  11      =2  
  12      =2  #endif
  13      =2  
   5      =1  
   6      =1  /*$PAGE*/
   7      =1  /*
   8      =1  *********************************************************************************************************
   9      =1  *                                       FUNCTION PROTOTYPES
  10      =1  *********************************************************************************************************
  11      =1  */
  12      =1  uint8_t operation(uint8_t *in) reentrant;
  13      =1  
  14      =1  uint8_t check_hex(uint8_t *in) reentrant;
  15      =1  
  16      =1  void get_hex(uint8_t* out,uint8_t* in) reentrant;
  17      =1  
  18      =1  uint8_t str_comp(uint8_t* str1,uint8_t* str2, uint8_t nbytes) reentrant;
  19      =1  
  20      =1  char* bin_to_string(const unsigned char input[], int nbytes);
  21      =1  
  22      =1  #endif
  23      =1  
  10          
  11          /*
  12          **********************************************************************************************************
             -****
  13          *                                               VARIABLES
  14          **********************************************************************************************************
             -****
  15          */
C51 COMPILER V9.02   TERMINAL                                                              07/14/2015 21:42:20 PAGE 2   

  16          
  17          code uint8_t operation_chose[3][8] = {"SETKEY","ENCRYPT","DECRYPT"};
  18          
  19          code uint8_t decimal2hex[] = {'0', '1', '2', '3', '4',
  20                                       '5', '6', '7', '8', '9',
  21                                       'A','B','C','D','E','F'
  22                                      };
  23          
  24          /*$PAGE*/
  25          /*
  26          *********************************************************************************************************
  27          *                                              operation check
  28          *
  29          * Description: This function is used to check the input from terminal to chose the operation
  30          *
  31          * Arguments  : in           is a pointer to the input data come from terminal.
  32          *
  33          * Returns    : =1               SETKEY chosen
  34          *
  35          *                          =2           ENCRYPT chosen
  36          *
  37          *                          =3           DECRYPT chosen
  38          *
  39          *                          =0           wrong entered
  40          *********************************************************************************************************
  41          */
  42          uint8_t operation(uint8_t *in) reentrant
  43          {
  44   1          if(str_comp(in, &operation_chose[0], 6))
  45   1              return 1;
  46   1      
  47   1          if(str_comp(in, &operation_chose[1], 6))
  48   1              return 2;
  49   1      
  50   1          if(str_comp(in, &operation_chose[1], 6))
  51   1              return 3;
  52   1      
  53   1          return 0;
  54   1      }
  55          
  56          /*$PAGE*/
  57          /*
  58          *********************************************************************************************************
  59          *                                              check hex data input
  60          *
  61          * Description: This function is used to check the hex input from terminal is already hex
  62          *
  63          * Arguments  : in           is a pointer to the input data come from terminal.
  64          *
  65          * Returns    : =1               data is hex
  66          *
  67          *                          =0           wrong data entered
  68          *********************************************************************************************************
  69          */
  70          uint8_t check_hex(uint8_t *in) reentrant
  71          {
  72   1          uint8_t i, j,check=0;
  73   1          for(i = 0; i<16; i++)
  74   1          {
  75   2              for(j = 0; j<16; j++)
  76   2                  if(in[i]==decimal2hex[j])
  77   2                      check=1;
C51 COMPILER V9.02   TERMINAL                                                              07/14/2015 21:42:20 PAGE 3   

  78   2              if(check==0)
  79   2                  return 0;
  80   2          }
  81   1          return 1;
  82   1      }
  83          
  84          /*$PAGE*/
  85          /*
  86          *********************************************************************************************************
  87          *                                              get hex from string input
  88          *
  89          * Description: This function is used to get hex from string input from terminal.
  90          *
  91          * Arguments  : out        pointer to the block (64 bit = 8 byte) where the converted data is written to
  92          *
  93          *              in     pointer to the block (64 bit = 8 byte) where the terminal data come
  94          *
  95          * Returns    : None
  96          *********************************************************************************************************
  97          */
  98          void get_hex(uint8_t* out,uint8_t* in) reentrant
  99          {
 100   1          uint8_t i, j,hex_value=0,next=0;
 101   1          for(i = 0; i<16; i++)
 102   1          {
 103   2              for(j = 0; j<16; j++)
 104   2              {
 105   3                  if(in[i]==decimal2hex[j])
 106   3                  {
 107   4                      hex_value|=j;
 108   4                      break;
 109   4                  }
 110   3              }
 111   2              if(i%2)
 112   2              {
 113   3                  out[next++] = hex_value;
 114   3                  hex_value =0;
 115   3              }
 116   2              hex_value=hex_value<<4;
 117   2          }
 118   1      }
 119          
 120          /*$PAGE*/
 121          /*
 122          *********************************************************************************************************
 123          *                                      binary to string
 124          *
 125          * Description: This function use to convert data from binary to string
 126          *
 127          * Arguments  : input    is a point to the array want to be converted.
 128          *
 129          *                          nbytes       is a char that represent the number of array.
 130          *
 131          * Returns    : output   is a point to the 1st element of string.
 132          *********************************************************************************************************
 133          */
 134          char* bin_to_string(const unsigned char input[], int nbytes)
 135          {
 136   1          int i;
 137   1          static char output[64 + 3];
 138   1          char* output_ptr = output;
 139   1          *output_ptr++ = '0';
C51 COMPILER V9.02   TERMINAL                                                              07/14/2015 21:42:20 PAGE 4   

 140   1          *output_ptr++ = 'x';
 141   1          for (i=0; i<nbytes; i++)
 142   1          {
 143   2              *output_ptr++ = decimal2hex[(input[i]&0xF0)>>4];
 144   2              *output_ptr++ = decimal2hex[(input[i]&0x0F)];
 145   2          }
 146   1          *output_ptr++ = '\r';
 147   1          *output_ptr = '\0';
 148   1          return output;
 149   1      }
 150          
 151          /*$PAGE*/
 152          /*
 153          *********************************************************************************************************
 154          *                                              string compare
 155          *
 156          * Description: This function is used to compare between tow string in certin n bytes.
 157          *
 158          * Arguments  : str1             pointer to the 1st element of 1st string
 159          *
 160          *              str2     pointer to the 2nd element of 2nd string
 161          *
 162          *              nbytes   number of bytes
 163          *
 164          * Returns  =1  of str1 match with str2
 165          *
 166          *                  =0  of str1 dosnt match with str2
 167          *********************************************************************************************************
 168          */
 169          uint8_t str_comp(uint8_t* str1,uint8_t* str2, uint8_t nbytes) reentrant
 170          {
 171   1          uint8_t i=0;
 172   1          while(i < nbytes)
 173   1          {
 174   2              if(str1[i]!=str2[i])
 175   2                              return 0;
 176   2                      i++;
 177   2              }
 178   1              return 1;
 179   1      }
C51 COMPILER V9.02   TERMINAL                                                              07/14/2015 21:42:20 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _?operation (BEGIN)
                                           ; SOURCE LINE # 42
0000 1500        E     DEC     ?C_IBP
0002 1500        E     DEC     ?C_IBP
0004 1500        E     DEC     ?C_IBP
0006 A800        E     MOV     R0,?C_IBP
0008 A603              MOV     @R0,AR3
000A 08                INC     R0
000B A602              MOV     @R0,AR2
000D 08                INC     R0
000E A601              MOV     @R0,AR1
                                           ; SOURCE LINE # 44
0010 1500        E     DEC     ?C_IBP
0012 A800        E     MOV     R0,?C_IBP
0014 7606              MOV     @R0,#06H
0016 1500        E     DEC     ?C_IBP
0018 1500        E     DEC     ?C_IBP
001A 1500        E     DEC     ?C_IBP
001C A800        E     MOV     R0,?C_IBP
001E 76FF              MOV     @R0,#0FFH
0020 08                INC     R0
0021 7600        R     MOV     @R0,#HIGH operation_chose
0023 08                INC     R0
0024 7600        R     MOV     @R0,#LOW operation_chose
0026 120000      R     LCALL   L?0038
0029 EF                MOV     A,R7
002A 6004              JZ      ?C0001
                                           ; SOURCE LINE # 45
002C 7F01              MOV     R7,#01H
002E 8016              SJMP    ?C0002
0030         ?C0001:
                                           ; SOURCE LINE # 47
0030 120000      R     LCALL   L?0037
0033 EF                MOV     A,R7
0034 6004              JZ      ?C0003
                                           ; SOURCE LINE # 48
0036 7F02              MOV     R7,#02H
0038 800C              SJMP    ?C0002
003A         ?C0003:
                                           ; SOURCE LINE # 50
003A 120000      R     LCALL   L?0037
003D EF                MOV     A,R7
003E 6004              JZ      ?C0004
                                           ; SOURCE LINE # 51
0040 7F03              MOV     R7,#03H
0042 8002              SJMP    ?C0002
0044         ?C0004:
                                           ; SOURCE LINE # 53
0044 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 54
0046         ?C0002:
0046 0500        E     INC     ?C_IBP
0048 0500        E     INC     ?C_IBP
004A 0500        E     INC     ?C_IBP
004C 22                RET     
             ; FUNCTION _?operation (END)

             ; FUNCTION _?check_hex (BEGIN)
                                           ; SOURCE LINE # 70
C51 COMPILER V9.02   TERMINAL                                                              07/14/2015 21:42:20 PAGE 6   

0000 1500        E     DEC     ?C_IBP
0002 1500        E     DEC     ?C_IBP
0004 1500        E     DEC     ?C_IBP
0006 A800        E     MOV     R0,?C_IBP
0008 A603              MOV     @R0,AR3
000A 08                INC     R0
000B A602              MOV     @R0,AR2
000D 08                INC     R0
000E A601              MOV     @R0,AR1
0010 1500        E     DEC     ?C_IBP
0012 1500        E     DEC     ?C_IBP
0014 1500        E     DEC     ?C_IBP
                                           ; SOURCE LINE # 72
0016 A800        E     MOV     R0,?C_IBP
0018 08                INC     R0
0019 08                INC     R0
001A E4                CLR     A
001B F6                MOV     @R0,A
                                           ; SOURCE LINE # 73
001C A800        E     MOV     R0,?C_IBP
001E F6                MOV     @R0,A
001F         ?C0005:
001F A800        E     MOV     R0,?C_IBP
0021 E6                MOV     A,@R0
0022 C3                CLR     C
0023 9410              SUBB    A,#010H
0025 5049              JNC     ?C0006
                                           ; SOURCE LINE # 74
                                           ; SOURCE LINE # 75
0027 08                INC     R0
0028 E4                CLR     A
0029 F6                MOV     @R0,A
002A         ?C0008:
002A A800        E     MOV     R0,?C_IBP
002C 08                INC     R0
002D E6                MOV     A,@R0
002E FF                MOV     R7,A
002F C3                CLR     C
0030 9410              SUBB    A,#010H
0032 502D              JNC     ?C0009
                                           ; SOURCE LINE # 76
0034 E500        E     MOV     A,?C_IBP
0036 2403              ADD     A,#03H
0038 F8                MOV     R0,A
0039 8603              MOV     AR3,@R0
003B 08                INC     R0
003C E6                MOV     A,@R0
003D FA                MOV     R2,A
003E 08                INC     R0
003F E6                MOV     A,@R0
0040 F9                MOV     R1,A
0041 A800        E     MOV     R0,?C_IBP
0043 E6                MOV     A,@R0
0044 F582              MOV     DPL,A
0046 758300            MOV     DPH,#00H
0049 120000      E     LCALL   ?C?CLDOPTR
004C FE                MOV     R6,A
004D EF                MOV     A,R7
004E 900000      R     MOV     DPTR,#decimal2hex
0051 93                MOVC    A,@A+DPTR
0052 B50606            CJNE    A,AR6,?C0010
                                           ; SOURCE LINE # 77
C51 COMPILER V9.02   TERMINAL                                                              07/14/2015 21:42:20 PAGE 7   

0055 A800        E     MOV     R0,?C_IBP
0057 08                INC     R0
0058 08                INC     R0
0059 7601              MOV     @R0,#01H
005B         ?C0010:
005B A800        E     MOV     R0,?C_IBP
005D 08                INC     R0
005E 06                INC     @R0
005F 80C9              SJMP    ?C0008
0061         ?C0009:
                                           ; SOURCE LINE # 78
0061 A800        E     MOV     R0,?C_IBP
0063 08                INC     R0
0064 08                INC     R0
0065 E6                MOV     A,@R0
0066 7003              JNZ     ?C0007
                                           ; SOURCE LINE # 79
0068 FF                MOV     R7,A
0069 8007              SJMP    ?C0013
                                           ; SOURCE LINE # 80
006B         ?C0007:
006B A800        E     MOV     R0,?C_IBP
006D 06                INC     @R0
006E 80AF              SJMP    ?C0005
0070         ?C0006:
                                           ; SOURCE LINE # 81
0070 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 82
0072         ?C0013:
0072 E500        E     MOV     A,?C_IBP
0074 2406              ADD     A,#06H
0076 F500        E     MOV     ?C_IBP,A
0078 22                RET     
             ; FUNCTION _?check_hex (END)

             ; FUNCTION _?get_hex (BEGIN)
                                           ; SOURCE LINE # 98
0000 1500        E     DEC     ?C_IBP
0002 1500        E     DEC     ?C_IBP
0004 1500        E     DEC     ?C_IBP
0006 A800        E     MOV     R0,?C_IBP
0008 A603              MOV     @R0,AR3
000A 08                INC     R0
000B A602              MOV     @R0,AR2
000D 08                INC     R0
000E A601              MOV     @R0,AR1
0010 E500        E     MOV     A,?C_IBP
0012 24FC              ADD     A,#0FCH
0014 F500        E     MOV     ?C_IBP,A
                                           ; SOURCE LINE # 100
0016 F8                MOV     R0,A
0017 08                INC     R0
0018 08                INC     R0
0019 E4                CLR     A
001A F6                MOV     @R0,A
001B E500        E     MOV     A,?C_IBP
001D 2403              ADD     A,#03H
001F F8                MOV     R0,A
0020 E4                CLR     A
0021 F6                MOV     @R0,A
                                           ; SOURCE LINE # 101
0022 A800        E     MOV     R0,?C_IBP
C51 COMPILER V9.02   TERMINAL                                                              07/14/2015 21:42:20 PAGE 8   

0024 F6                MOV     @R0,A
0025         ?C0014:
0025 A800        E     MOV     R0,?C_IBP
0027 E6                MOV     A,@R0
0028 C3                CLR     C
0029 9410              SUBB    A,#010H
002B 4003              JC      $ + 5H
002D 020000      R     LJMP    ?C0022
                                           ; SOURCE LINE # 102
                                           ; SOURCE LINE # 103
0030 08                INC     R0
0031 E4                CLR     A
0032 F6                MOV     @R0,A
0033         ?C0017:
0033 A800        E     MOV     R0,?C_IBP
0035 08                INC     R0
0036 E6                MOV     A,@R0
0037 FF                MOV     R7,A
0038 C3                CLR     C
0039 9410              SUBB    A,#010H
003B 5039              JNC     ?C0018
                                           ; SOURCE LINE # 104
                                           ; SOURCE LINE # 105
003D E500        E     MOV     A,?C_IBP
003F 2407              ADD     A,#07H
0041 F8                MOV     R0,A
0042 8603              MOV     AR3,@R0
0044 08                INC     R0
0045 E6                MOV     A,@R0
0046 FA                MOV     R2,A
0047 08                INC     R0
0048 E6                MOV     A,@R0
0049 F9                MOV     R1,A
004A A800        E     MOV     R0,?C_IBP
004C E6                MOV     A,@R0
004D F582              MOV     DPL,A
004F 758300            MOV     DPH,#00H
0052 120000      E     LCALL   ?C?CLDOPTR
0055 FE                MOV     R6,A
0056 EF                MOV     A,R7
0057 900000      R     MOV     DPTR,#decimal2hex
005A 93                MOVC    A,@A+DPTR
005B B50612            CJNE    A,AR6,?C0019
                                           ; SOURCE LINE # 106
                                           ; SOURCE LINE # 107
005E A800        E     MOV     R0,?C_IBP
0060 08                INC     R0
0061 08                INC     R0
0062 C000              PUSH    AR0
0064 A900              MOV     R1,AR0
0066 A800        E     MOV     R0,?C_IBP
0068 08                INC     R0
0069 E7                MOV     A,@R1
006A 46                ORL     A,@R0
006B D000              POP     AR0
006D F6                MOV     @R0,A
                                           ; SOURCE LINE # 108
006E 8006              SJMP    ?C0018
                                           ; SOURCE LINE # 109
                                           ; SOURCE LINE # 110
0070         ?C0019:
0070 A800        E     MOV     R0,?C_IBP
C51 COMPILER V9.02   TERMINAL                                                              07/14/2015 21:42:20 PAGE 9   

0072 08                INC     R0
0073 06                INC     @R0
0074 80BD              SJMP    ?C0017
0076         ?C0018:
                                           ; SOURCE LINE # 111
0076 A800        E     MOV     R0,?C_IBP
0078 E6                MOV     A,@R0
0079 30E027            JNB     ACC.0,?C0021
                                           ; SOURCE LINE # 112
                                           ; SOURCE LINE # 113
007C 08                INC     R0
007D 08                INC     R0
007E E6                MOV     A,@R0
007F FF                MOV     R7,A
0080 E500        E     MOV     A,?C_IBP
0082 2404              ADD     A,#04H
0084 F8                MOV     R0,A
0085 8603              MOV     AR3,@R0
0087 08                INC     R0
0088 E6                MOV     A,@R0
0089 FA                MOV     R2,A
008A 08                INC     R0
008B E6                MOV     A,@R0
008C F9                MOV     R1,A
008D E500        E     MOV     A,?C_IBP
008F 2403              ADD     A,#03H
0091 F8                MOV     R0,A
0092 E6                MOV     A,@R0
0093 06                INC     @R0
0094 F582              MOV     DPL,A
0096 758300            MOV     DPH,#00H
0099 EF                MOV     A,R7
009A 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 114
009D A800        E     MOV     R0,?C_IBP
009F 08                INC     R0
00A0 08                INC     R0
00A1 E4                CLR     A
00A2 F6                MOV     @R0,A
                                           ; SOURCE LINE # 115
00A3         ?C0021:
                                           ; SOURCE LINE # 116
00A3 A800        E     MOV     R0,?C_IBP
00A5 08                INC     R0
00A6 08                INC     R0
00A7 C000              PUSH    AR0
00A9 E6                MOV     A,@R0
00AA C4                SWAP    A
00AB 54F0              ANL     A,#0F0H
00AD D000              POP     AR0
00AF F6                MOV     @R0,A
                                           ; SOURCE LINE # 117
00B0 A800        E     MOV     R0,?C_IBP
00B2 06                INC     @R0
00B3 020000      R     LJMP    ?C0014
                                           ; SOURCE LINE # 118
00B6         ?C0022:
00B6 E500        E     MOV     A,?C_IBP
00B8 240A              ADD     A,#0AH
00BA F500        E     MOV     ?C_IBP,A
00BC 22                RET     
             ; FUNCTION _?get_hex (END)
C51 COMPILER V9.02   TERMINAL                                                              07/14/2015 21:42:20 PAGE 10  


             ; FUNCTION _bin_to_string (BEGIN)
                                           ; SOURCE LINE # 134
0000 8B00        R     MOV     input,R3
0002 8A00        R     MOV     input+01H,R2
0004 8900        R     MOV     input+02H,R1
0006 8C00        R     MOV     nbytes,R4
0008 8D00        R     MOV     nbytes+01H,R5
                                           ; SOURCE LINE # 135
                                           ; SOURCE LINE # 138
000A 750000      R     MOV     output_ptr,#00H
000D 750000      R     MOV     output_ptr+01H,#HIGH output
0010 750000      R     MOV     output_ptr+02H,#LOW output
                                           ; SOURCE LINE # 139
0013 AB00        R     MOV     R3,output_ptr
0015 0500        R     INC     output_ptr+02H
0017 E500        R     MOV     A,output_ptr+02H
0019 AA00        R     MOV     R2,output_ptr+01H
001B 7002              JNZ     ?C0031
001D 0500        R     INC     output_ptr+01H
001F         ?C0031:
001F 14                DEC     A
0020 F9                MOV     R1,A
0021 7430              MOV     A,#030H
0023 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 140
0026 AB00        R     MOV     R3,output_ptr
0028 0500        R     INC     output_ptr+02H
002A E500        R     MOV     A,output_ptr+02H
002C AA00        R     MOV     R2,output_ptr+01H
002E 7002              JNZ     ?C0032
0030 0500        R     INC     output_ptr+01H
0032         ?C0032:
0032 14                DEC     A
0033 F9                MOV     R1,A
0034 7478              MOV     A,#078H
0036 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 141
;---- Variable 'i' assigned to Register 'R6/R7' ----
0039 E4                CLR     A
003A FF                MOV     R7,A
003B FE                MOV     R6,A
003C         ?C0023:
003C C3                CLR     C
003D EF                MOV     A,R7
003E 9500        R     SUBB    A,nbytes+01H
0040 E500        R     MOV     A,nbytes
0042 6480              XRL     A,#080H
0044 F8                MOV     R0,A
0045 EE                MOV     A,R6
0046 6480              XRL     A,#080H
0048 98                SUBB    A,R0
0049 5056              JNC     ?C0024
                                           ; SOURCE LINE # 142
                                           ; SOURCE LINE # 143
004B AB00        R     MOV     R3,input
004D AA00        R     MOV     R2,input+01H
004F A900        R     MOV     R1,input+02H
0051 8F82              MOV     DPL,R7
0053 8E83              MOV     DPH,R6
0055 120000      E     LCALL   ?C?CLDOPTR
0058 54F0              ANL     A,#0F0H
C51 COMPILER V9.02   TERMINAL                                                              07/14/2015 21:42:20 PAGE 11  

005A C4                SWAP    A
005B 540F              ANL     A,#0FH
005D 900000      R     MOV     DPTR,#decimal2hex
0060 93                MOVC    A,@A+DPTR
0061 FD                MOV     R5,A
0062 AB00        R     MOV     R3,output_ptr
0064 0500        R     INC     output_ptr+02H
0066 E500        R     MOV     A,output_ptr+02H
0068 AA00        R     MOV     R2,output_ptr+01H
006A 7002              JNZ     ?C0033
006C 0500        R     INC     output_ptr+01H
006E         ?C0033:
006E 14                DEC     A
006F F9                MOV     R1,A
0070 ED                MOV     A,R5
0071 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 144
0074 AB00        R     MOV     R3,input
0076 AA00        R     MOV     R2,input+01H
0078 A900        R     MOV     R1,input+02H
007A 8F82              MOV     DPL,R7
007C 8E83              MOV     DPH,R6
007E 120000      E     LCALL   ?C?CLDOPTR
0081 540F              ANL     A,#0FH
0083 900000      R     MOV     DPTR,#decimal2hex
0086 93                MOVC    A,@A+DPTR
0087 FD                MOV     R5,A
0088 AB00        R     MOV     R3,output_ptr
008A 0500        R     INC     output_ptr+02H
008C E500        R     MOV     A,output_ptr+02H
008E AA00        R     MOV     R2,output_ptr+01H
0090 7002              JNZ     ?C0034
0092 0500        R     INC     output_ptr+01H
0094         ?C0034:
0094 14                DEC     A
0095 F9                MOV     R1,A
0096 ED                MOV     A,R5
0097 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 145
009A 0F                INC     R7
009B BF0001            CJNE    R7,#00H,?C0035
009E 0E                INC     R6
009F         ?C0035:
009F 809B              SJMP    ?C0023
00A1         ?C0024:
                                           ; SOURCE LINE # 146
00A1 AB00        R     MOV     R3,output_ptr
00A3 0500        R     INC     output_ptr+02H
00A5 E500        R     MOV     A,output_ptr+02H
00A7 AA00        R     MOV     R2,output_ptr+01H
00A9 7002              JNZ     ?C0036
00AB 0500        R     INC     output_ptr+01H
00AD         ?C0036:
00AD 14                DEC     A
00AE F9                MOV     R1,A
00AF 740D              MOV     A,#0DH
00B1 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 147
00B4 AB00        R     MOV     R3,output_ptr
00B6 AA00        R     MOV     R2,output_ptr+01H
00B8 A900        R     MOV     R1,output_ptr+02H
00BA E4                CLR     A
C51 COMPILER V9.02   TERMINAL                                                              07/14/2015 21:42:20 PAGE 12  

00BB 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 148
00BE FB                MOV     R3,A
00BF 7A00        R     MOV     R2,#HIGH output
00C1 7900        R     MOV     R1,#LOW output
                                           ; SOURCE LINE # 149
00C3         ?C0026:
00C3 22                RET     
             ; FUNCTION _bin_to_string (END)

             ; FUNCTION L?0037 (BEGIN)
0000 1500        E     DEC     ?C_IBP
0002 A800        E     MOV     R0,?C_IBP
0004 7606              MOV     @R0,#06H
0006 1500        E     DEC     ?C_IBP
0008 1500        E     DEC     ?C_IBP
000A 1500        E     DEC     ?C_IBP
000C A800        E     MOV     R0,?C_IBP
000E 76FF              MOV     @R0,#0FFH
0010 08                INC     R0
0011 7600        R     MOV     @R0,#HIGH operation_chose+08H
0013 08                INC     R0
0014 7600        R     MOV     @R0,#LOW operation_chose+08H
0016         L?0038:
0016 E500        E     MOV     A,?C_IBP
0018 2404              ADD     A,#04H
001A F8                MOV     R0,A
001B 8603              MOV     AR3,@R0
001D 08                INC     R0
001E E6                MOV     A,@R0
001F FA                MOV     R2,A
0020 08                INC     R0
0021 E6                MOV     A,@R0
0022 F9                MOV     R1,A
             ; FUNCTION _?str_comp (BEGIN)
                                           ; SOURCE LINE # 169
0023 1500        E     DEC     ?C_IBP
0025 1500        E     DEC     ?C_IBP
0027 1500        E     DEC     ?C_IBP
0029 A800        E     MOV     R0,?C_IBP
002B A603              MOV     @R0,AR3
002D 08                INC     R0
002E A602              MOV     @R0,AR2
0030 08                INC     R0
0031 A601              MOV     @R0,AR1
0033 1500        E     DEC     ?C_IBP
                                           ; SOURCE LINE # 171
0035 A800        E     MOV     R0,?C_IBP
0037 E4                CLR     A
0038 F6                MOV     @R0,A
0039         ?C0027:
                                           ; SOURCE LINE # 172
0039 E500        E     MOV     A,?C_IBP
003B 2407              ADD     A,#07H
003D F9                MOV     R1,A
003E A800        E     MOV     R0,?C_IBP
0040 E6                MOV     A,@R0
0041 FF                MOV     R7,A
0042 C3                CLR     C
0043 97                SUBB    A,@R1
0044 5035              JNC     ?C0028
                                           ; SOURCE LINE # 173
C51 COMPILER V9.02   TERMINAL                                                              07/14/2015 21:42:20 PAGE 13  

                                           ; SOURCE LINE # 174
0046 E500        E     MOV     A,?C_IBP
0048 2404              ADD     A,#04H
004A F8                MOV     R0,A
004B 8603              MOV     AR3,@R0
004D 08                INC     R0
004E E6                MOV     A,@R0
004F FA                MOV     R2,A
0050 08                INC     R0
0051 E6                MOV     A,@R0
0052 F9                MOV     R1,A
0053 8F82              MOV     DPL,R7
0055 758300            MOV     DPH,#00H
0058 120000      E     LCALL   ?C?CLDOPTR
005B FE                MOV     R6,A
005C A800        E     MOV     R0,?C_IBP
005E 08                INC     R0
005F 8603              MOV     AR3,@R0
0061 08                INC     R0
0062 E6                MOV     A,@R0
0063 FA                MOV     R2,A
0064 08                INC     R0
0065 E6                MOV     A,@R0
0066 F9                MOV     R1,A
0067 8F82              MOV     DPL,R7
0069 758300            MOV     DPH,#00H
006C 120000      E     LCALL   ?C?CLDOPTR
006F 6E                XRL     A,R6
0070 6004              JZ      ?C0029
                                           ; SOURCE LINE # 175
0072 7F00              MOV     R7,#00H
0074 8007              SJMP    ?C0030
0076         ?C0029:
                                           ; SOURCE LINE # 176
0076 A800        E     MOV     R0,?C_IBP
0078 06                INC     @R0
                                           ; SOURCE LINE # 177
0079 80BE              SJMP    ?C0027
007B         ?C0028:
                                           ; SOURCE LINE # 178
007B 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 179
007D         ?C0030:
007D E500        E     MOV     A,?C_IBP
007F 2408              ADD     A,#08H
0081 F500        E     MOV     ?C_IBP,A
0083 22                RET     
             ; FUNCTION _?str_comp (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    715    ----
   CONSTANT SIZE    =     40    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     67       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
