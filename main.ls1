A51 MACRO ASSEMBLER  MAIN                                                                 07/14/2015 21:39:13 PAGE     1


MACRO ASSEMBLER A51 V8.02
OBJECT MODULE PLACED IN main.OBJ
ASSEMBLER INVOKED BY: C:\Keil\C51\BIN\A51.EXE main.src PR(.\main.ls1) EP DEBUG

LOC  OBJ            LINE     SOURCE

                       1     ; .\main.SRC generated from: main.C
                       2     ; COMPILER INVOKED BY:
                       3     ;        C:\Keil\C51\BIN\C51.EXE main.C BROWSE DEBUG OBJECTEXTEND CODE LISTINCLUDE SRC(.\ma
                             in.SRC)
                       4     
                       5     $nomod51 
                       6     
                       7     NAME    MAIN
                       8     
  0080                 9     P0      DATA    080H
  0090                10     P1      DATA    090H
  00A0                11     P2      DATA    0A0H
  00B0                12     P3      DATA    0B0H
  00B4                13     T0      BIT     0B0H.4
  00D6                14     AC      BIT     0D0H.6
  00B5                15     T1      BIT     0B0H.5
  0090                16     T2      BIT     090H.0
  00AF                17     EA      BIT     0A8H.7
  00A8                18     IE      DATA    0A8H
  00CE                19     EXF2    BIT     0C8H.6
  00B7                20     RD      BIT     0B0H.7
  00AC                21     ES      BIT     0A8H.4
  00B8                22     IP      DATA    0B8H
  0098                23     RI      BIT     098H.0
  00B2                24     INT0    BIT     0B0H.2
  00D7                25     CY      BIT     0D0H.7
  0099                26     TI      BIT     098H.1
  00B3                27     INT1    BIT     0B0H.3
  00CB                28     RCAP2H  DATA    0CBH
  00BC                29     PS      BIT     0B8H.4
  0081                30     SP      DATA    081H
  0091                31     T2EX    BIT     090H.1
  00D2                32     OV      BIT     0D0H.2
  00CA                33     RCAP2L  DATA    0CAH
  00C9                34     C_T2    BIT     0C8H.1
  00B6                35     WR      BIT     0B0H.6
  00CD                36     RCLK    BIT     0C8H.5
  00CC                37     TCLK    BIT     0C8H.4
  0099                38     SBUF    DATA    099H
  0087                39     PCON    DATA    087H
  0098                40     SCON    DATA    098H
  0089                41     TMOD    DATA    089H
  0088                42     TCON    DATA    088H
  0089                43     IE0     BIT     088H.1
  008B                44     IE1     BIT     088H.3
  00F0                45     B       DATA    0F0H
  00C8                46     CP_RL2  BIT     0C8H.0
  00E0                47     ACC     DATA    0E0H
  00A9                48     ET0     BIT     0A8H.1
  00AB                49     ET1     BIT     0A8H.3
  008D                50     TF0     BIT     088H.5
  00AD                51     ET2     BIT     0A8H.5
  008F                52     TF1     BIT     088H.7
  00CF                53     TF2     BIT     0C8H.7
  009A                54     RB8     BIT     098H.2
  008C                55     TH0     DATA    08CH
  00A8                56     EX0     BIT     0A8H.0
  0088                57     IT0     BIT     088H.0
A51 MACRO ASSEMBLER  MAIN                                                                 07/14/2015 21:39:13 PAGE     2

  008D                58     TH1     DATA    08DH
  009B                59     TB8     BIT     098H.3
  00AA                60     EX1     BIT     0A8H.2
  008A                61     IT1     BIT     088H.2
  00CD                62     TH2     DATA    0CDH
  00D0                63     P       BIT     0D0H.0
  009F                64     SM0     BIT     098H.7
  008A                65     TL0     DATA    08AH
  009E                66     SM1     BIT     098H.6
  008B                67     TL1     DATA    08BH
  009D                68     SM2     BIT     098H.5
  00CC                69     TL2     DATA    0CCH
  00B9                70     PT0     BIT     0B8H.1
  00BB                71     PT1     BIT     0B8H.3
  00D3                72     RS0     BIT     0D0H.3
  00BD                73     PT2     BIT     0B8H.5
  008C                74     TR0     BIT     088H.4
  00D4                75     RS1     BIT     0D0H.4
  008E                76     TR1     BIT     088H.6
  00CA                77     TR2     BIT     0C8H.2
  00B8                78     PX0     BIT     0B8H.0
  00BA                79     PX1     BIT     0B8H.2
  0083                80     DPH     DATA    083H
  0082                81     DPL     DATA    082H
  00CB                82     EXEN2   BIT     0C8H.3
  009C                83     REN     BIT     098H.4
  00C8                84     T2CON   DATA    0C8H
  00B0                85     RXD     BIT     0B0H.0
  00B1                86     TXD     BIT     0B0H.1
  00D5                87     F0      BIT     0D0H.5
  00D0                88     PSW     DATA    0D0H
                      89     ?PR?main?MAIN        SEGMENT CODE 
                      90     ?PR?_?desTest?MAIN   SEGMENT CODE 
                      91     ?DT?MAIN             SEGMENT DATA 
                      92     ?CO?MAIN             SEGMENT CODE 
                      93             EXTRN   CODE (_?decrypt)
                      94             EXTRN   CODE (_?encrypt)
                      95             EXTRN   CODE (_?check_hex)
                      96             EXTRN   CODE (_uart_string)
                      97             EXTRN   CODE (uart_init)
                      98             EXTRN   CODE (_?operation)
                      99             EXTRN   CODE (_?get_hex)
                     100             EXTRN   CODE (_bin_to_string)
                     101             EXTRN   CODE (_?uart_getstring)
                     102             EXTRN   CODE (?C_STARTUP)
                     103             EXTRN   DATA (?C_IBP)
                     104             PUBLIC  error_check_vlues
                     105             PUBLIC  error
                     106             PUBLIC  result
                     107             PUBLIC  input
                     108             PUBLIC  welcome
                     109             PUBLIC  _?desTest
                     110             PUBLIC  main
                     111     
----                 112             RSEG  ?DT?MAIN
0000                 113                 key:   DS   8
                     114     
----                 115             RSEG  ?CO?MAIN
0000                 116     ?SC_0:
0000 52657375        117             DB  'R' ,'e' ,'s' ,'u' ,'l' ,'t' ,':' ,' ' ,'K' ,'e' 
0004 6C743A20                
0008 4B65                    
000A 79204368        118             DB  'y' ,' ' ,'C' ,'h' ,'a' ,'n' ,'g' ,'e' ,'d' ,' ' 
000E 616E6765                
0012 6420                    
0014 53756363        119             DB  'S' ,'u' ,'c' ,'c' ,'e' ,'s' ,'s' ,'f' ,'u' ,'l' 
A51 MACRO ASSEMBLER  MAIN                                                                 07/14/2015 21:39:13 PAGE     3

0018 65737366                
001C 756C                    
001E 6C790D00        120             DB  'l' ,'y' ,00DH,000H
                     121     
0022                 122     welcome:
0022 77656C63        123             DB  'w' ,'e' ,'l' ,'c' ,'o' ,'m' ,'e' ,00DH,000H
0026 6F6D650D                
002A 00                      
                     124     
                     125     
002B                 126     input:
002B 496E7075        127             DB  'I' ,'n' ,'p' ,'u' ,'t' ,':' ,000H
002F 743A00                  
                     128     
                     129     
0032                 130     result:
0032 52657375        131             DB  'R' ,'e' ,'s' ,'u' ,'l' ,'t' ,':' ,000H
0036 6C743A00                
                     132     
                     133     
003A                 134     error:
003A 706C6561        135             DB  'p' ,'l' ,'e' ,'a' ,'s' ,'e' ,' ' ,'e' ,'n' ,'t' 
003E 73652065                
0042 6E74                    
0044 65722053        136             DB  'e' ,'r' ,' ' ,'S' ,'E' ,'T' ,'K' ,'E' ,'Y' ,' ' 
0048 45544B45                
004C 5920                    
004E 6F722045        137             DB  'o' ,'r' ,' ' ,'E' ,'N' ,'C' ,'R' ,'Y' ,'P' ,'T' 
0052 4E435259                
0056 5054                    
0058 206F7220        138             DB  ' ' ,'o' ,'r' ,' ' ,'D' ,'E' ,'C' ,'R' ,'Y' ,'P' 
005C 44454352                
0060 5950                    
0062 540D00          139             DB  'T' ,00DH,000H
                     140     
                     141     
0065                 142     error_check_vlues:
0065 63686563        143             DB  'c' ,'h' ,'e' ,'c' ,'k' ,' ' ,'v' ,'a' ,'l' ,'u' 
0069 6B207661                
006D 6C75                    
006F 65732074        144             DB  'e' ,'s' ,' ' ,'t' ,'o' ,' ' ,'b' ,'e' ,' ' ,'h' 
0073 6F206265                
0077 2068                    
0079 65780D00        145             DB  'e' ,'x' ,00DH,000H
                     146     
                     147     
                     148     ; /*
                     149     ; *****************************************************************************************
                             ********************
                     150     ; *                                        DES-Algorithm-Implementation
                     151     ; *                                          Data Encryption Standard
                     152     ; *
                     153     ; *                                               DES  Test code
                     154     ; *
                     155     ; * File : main.C
                     156     ; * By   : Mostafa Abd El-Fatah, 2015
                     157     ; *****************************************************************************************
                             ********************
                     158     ; */
                     159     ; //#pragma SRC
                     160     ; #include <REG52.H>                /* special function register declarations   */
                     161     ; /* for the intended 8051 derivative         */
                     162     ; #include <stdio.h>                /* prototype declarations for I/O functions */
                     163     ; #include "datatypes.h"
                     164     ; #include "DES.h"
                     165     ; #include "UART.h"
A51 MACRO ASSEMBLER  MAIN                                                                 07/14/2015 21:39:13 PAGE     4

                     166     ; #include "TERMINAL.h"
                     167     ; 
                     168     ; /*
                     169     ; *****************************************************************************************
                             *********************
                     170     ; *                                               VARIABLES
                     171     ; *****************************************************************************************
                             *********************
                     172     ; */
                     173     ; code char welcome[] = "welcome\r";
                     174     ; code char input[] = "Input:";
                     175     ; code char result[] = "Result:";
                     176     ; code char error[] = "please enter SETKEY or ENCRYPT or DECRYPT\r";
                     177     ; code char error_check_vlues[] = "check values to be hex\r";
                     178     ; 
                     179     ; /*$PAGE*/
                     180     ; /*
                     181     ; *****************************************************************************************
                             ****************
                     182     ; *                                       FUNCTION PROTOTYPES
                     183     ; *****************************************************************************************
                             ****************
                     184     ; */
                     185     ; 
                     186     ; void desTest(void) reentrant;
                     187     ; 
                     188     ; /*
                     189     ; *****************************************************************************************
                             *********************
                     190     ; *                                                MAIN
                     191     ; *****************************************************************************************
                             *********************
                     192     ; */
                     193     ; void main (void)
                     194     
----                 195             RSEG  ?PR?main?MAIN
0000                 196     main:
                     197             USING   0
                     198                             ; SOURCE LINE # 46
                     199     ; {
                     200                             ; SOURCE LINE # 47
                     201     ;     uart_init();
                     202                             ; SOURCE LINE # 48
0000 120000   F      203             LCALL   uart_init
                     204     ;     uart_string(welcome);
                     205                             ; SOURCE LINE # 49
0003 7BFF            206             MOV     R3,#0FFH
0005 7A00     F      207             MOV     R2,#HIGH (welcome)
0007 7900     F      208             MOV     R1,#LOW (welcome)
0009 120000   F      209             LCALL   _uart_string
000C                 210     ?C0001:
                     211     ; //_asm NOP _endasm
                     212     ; //__asm { 0x00 }
                     213     ; //asm(" nop ");
                     214     ; //__asm{}
                     215     ; 
                     216     ; //    #pragma asm
                     217     ; //    nop;
                     218     ; //    #pragma endasm
                     219     ; 
                     220     ;     /*------------------------------------------------
                     221     ;      loop executed forever.
                     222     ;     ------------------------------------------------*/
                     223     ;     while (1)
                     224                             ; SOURCE LINE # 62
                     225     ;     {
A51 MACRO ASSEMBLER  MAIN                                                                 07/14/2015 21:39:13 PAGE     5

                     226                             ; SOURCE LINE # 63
                     227     ;         desTest();
                     228                             ; SOURCE LINE # 64
000C 120000   F      229             LCALL   _?desTest
                     230     ;     }
                     231                             ; SOURCE LINE # 65
000F 80FB            232             SJMP    ?C0001
                     233     ; END OF main
                     234     
                     235     ; }
                     236     ; 
                     237     ; /*$PAGE*/
                     238     ; /*
                     239     ; *****************************************************************************************
                             ****************
                     240     ; *                         Test encrypt and decrypt DES algorithm implementation
                     241     ; *
                     242     ; * Description: This function is used to Display Encrypted and Decrypted input data to the
                              console.
                     243     ; *
                     244     ; * Arguments  : None
                     245     ; *
                     246     ; * Returns    : None
                     247     ; *****************************************************************************************
                             ****************
                     248     ; */
                     249     ; void desTest(void) reentrant
                     250     
----                 251             RSEG  ?PR?_?desTest?MAIN
0000                 252     _?desTest:
                     253             USING   0
                     254                             ; SOURCE LINE # 80
0000 E500     F      255             MOV     A,?C_IBP
0002 24EA            256             ADD     A,#0EAH
0004 F500     F      257             MOV     ?C_IBP,A
                     258     ; {
                     259     ;     uint8_t *check_in, *ptr_hex;
                     260     ;     unsigned char out[8]; 
                     261     ;     unsigned char in[8];
                     262     ;     static unsigned char key[8];
                     263     ; 
                     264     ;     uart_string(input);
                     265                             ; SOURCE LINE # 87
0006 7BFF            266             MOV     R3,#0FFH
0008 7A00     F      267             MOV     R2,#HIGH (input)
000A 7900     F      268             MOV     R1,#LOW (input)
000C 120000   F      269             LCALL   _uart_string
                     270     ;     check_in = uart_getstring();
                     271                             ; SOURCE LINE # 88
000F 120000   F      272             LCALL   _?uart_getstring
0012 A800     F      273             MOV     R0,?C_IBP
0014 A603            274             MOV     @R0,AR3
0016 08              275             INC     R0
0017 A602            276             MOV     @R0,AR2
0019 08              277             INC     R0
001A A601            278             MOV     @R0,AR1
                     279     ; 
                     280     ;     switch(operation(check_in))
                     281                             ; SOURCE LINE # 90
001C A800     F      282             MOV     R0,?C_IBP
001E 8603            283             MOV     AR3,@R0
0020 08              284             INC     R0
0021 E6              285             MOV     A,@R0
0022 FA              286             MOV     R2,A
0023 08              287             INC     R0
0024 E6              288             MOV     A,@R0
A51 MACRO ASSEMBLER  MAIN                                                                 07/14/2015 21:39:13 PAGE     6

0025 F9              289             MOV     R1,A
0026 120000   F      290             LCALL   _?operation
0029 EF              291             MOV     A,R7
002A 24FE            292             ADD     A,#0FEH
002C 6074            293             JZ      ?C0008
002E 14              294             DEC     A
002F 7003            295             JNZ     $ + 5H
0031 020000   F      296             LJMP    ?C0011
0034 2402            297             ADD     A,#02H
0036 6003            298             JZ      $ + 5H
0038 020000   F      299             LJMP    ?C0014
                     300     ;     {
                     301                             ; SOURCE LINE # 91
                     302     ;     case 1:
                     303                             ; SOURCE LINE # 92
003B                 304     ?C0005:
                     305     ;         //uart_string("SETKEY");
                     306     ;         ptr_hex = check_in+7;
                     307                             ; SOURCE LINE # 94
003B A800     F      308             MOV     R0,?C_IBP
003D 8603            309             MOV     AR3,@R0
003F 08              310             INC     R0
0040 E6              311             MOV     A,@R0
0041 FA              312             MOV     R2,A
0042 08              313             INC     R0
0043 E6              314             MOV     A,@R0
0044 2407            315             ADD     A,#07H
0046 F9              316             MOV     R1,A
0047 E4              317             CLR     A
0048 3A              318             ADDC    A,R2
0049 FA              319             MOV     R2,A
004A E500     F      320             MOV     A,?C_IBP
004C 2403            321             ADD     A,#03H
004E F8              322             MOV     R0,A
004F A603            323             MOV     @R0,AR3
0051 08              324             INC     R0
0052 A602            325             MOV     @R0,AR2
0054 08              326             INC     R0
0055 A601            327             MOV     @R0,AR1
                     328     ;         if(check_hex(ptr_hex))                        /* if entered value in hex containu
                             e */
                     329                             ; SOURCE LINE # 95
0057 E500     F      330             MOV     A,?C_IBP
0059 2403            331             ADD     A,#03H
005B F8              332             MOV     R0,A
005C 8603            333             MOV     AR3,@R0
005E 08              334             INC     R0
005F E6              335             MOV     A,@R0
0060 FA              336             MOV     R2,A
0061 08              337             INC     R0
0062 E6              338             MOV     A,@R0
0063 F9              339             MOV     R1,A
0064 120000   F      340             LCALL   _?check_hex
0067 EF              341             MOV     A,R7
0068 602F            342             JZ      ?C0006
                     343     ;         {
                     344                             ; SOURCE LINE # 96
                     345     ;             get_hex(key,ptr_hex);             /* get string input and convert it to hex *
                             /
                     346                             ; SOURCE LINE # 97
006A E500     F      347             MOV     A,?C_IBP
006C 2403            348             ADD     A,#03H
006E F8              349             MOV     R0,A
006F 8603            350             MOV     AR3,@R0
0071 08              351             INC     R0
0072 E6              352             MOV     A,@R0
A51 MACRO ASSEMBLER  MAIN                                                                 07/14/2015 21:39:13 PAGE     7

0073 FA              353             MOV     R2,A
0074 08              354             INC     R0
0075 E6              355             MOV     A,@R0
0076 F9              356             MOV     R1,A
0077 1500     F      357             DEC     ?C_IBP
0079 1500     F      358             DEC     ?C_IBP
007B 1500     F      359             DEC     ?C_IBP
007D A800     F      360             MOV     R0,?C_IBP
007F A603            361             MOV     @R0,AR3
0081 08              362             INC     R0
0082 A602            363             MOV     @R0,AR2
0084 08              364             INC     R0
0085 A601            365             MOV     @R0,AR1
0087 7B00            366             MOV     R3,#00H
0089 7A00     F      367             MOV     R2,#HIGH (key)
008B 7900     F      368             MOV     R1,#LOW (key)
008D 120000   F      369             LCALL   _?get_hex
                     370     ;             uart_string("Result: Key Changed Successfully\r");
                     371                             ; SOURCE LINE # 98
0090 7BFF            372             MOV     R3,#0FFH
0092 7A00     F      373             MOV     R2,#HIGH (?SC_0)
0094 7900     F      374             MOV     R1,#LOW (?SC_0)
                     375     ;         }
                     376                             ; SOURCE LINE # 99
0096 020000   F      377             LJMP    ?C0021
0099                 378     ?C0006:
                     379     ;         else
                     380     ;         {
                     381                             ; SOURCE LINE # 101
                     382     ;             uart_string(error_check_vlues);
                     383                             ; SOURCE LINE # 102
0099 7BFF            384             MOV     R3,#0FFH
009B 7A00     F      385             MOV     R2,#HIGH (error_check_vlues)
009D 7900     F      386             MOV     R1,#LOW (error_check_vlues)
009F                 387     ?C0016:
                     388     ;         }
                     389                             ; SOURCE LINE # 103
                     390     ;         break;
                     391                             ; SOURCE LINE # 104
009F 020000   F      392             LJMP    ?C0021
                     393     ; 
                     394     ;     case 2:
                     395                             ; SOURCE LINE # 106
00A2                 396     ?C0008:
                     397     ;         //uart_string("ENCRYPT");
                     398     ;         ptr_hex = check_in+8;
                     399                             ; SOURCE LINE # 108
00A2 A800     F      400             MOV     R0,?C_IBP
00A4 8603            401             MOV     AR3,@R0
00A6 08              402             INC     R0
00A7 E6              403             MOV     A,@R0
00A8 FA              404             MOV     R2,A
00A9 08              405             INC     R0
00AA E6              406             MOV     A,@R0
00AB 2408            407             ADD     A,#08H
00AD F9              408             MOV     R1,A
00AE E4              409             CLR     A
00AF 3A              410             ADDC    A,R2
00B0 FA              411             MOV     R2,A
00B1 E500     F      412             MOV     A,?C_IBP
00B3 2403            413             ADD     A,#03H
00B5 F8              414             MOV     R0,A
00B6 A603            415             MOV     @R0,AR3
00B8 08              416             INC     R0
00B9 A602            417             MOV     @R0,AR2
00BB 08              418             INC     R0
A51 MACRO ASSEMBLER  MAIN                                                                 07/14/2015 21:39:13 PAGE     8

00BC A601            419             MOV     @R0,AR1
                     420     ;         if(check_hex(ptr_hex)==1)
                     421                             ; SOURCE LINE # 109
00BE E500     F      422             MOV     A,?C_IBP
00C0 2403            423             ADD     A,#03H
00C2 F8              424             MOV     R0,A
00C3 8603            425             MOV     AR3,@R0
00C5 08              426             INC     R0
00C6 E6              427             MOV     A,@R0
00C7 FA              428             MOV     R2,A
00C8 08              429             INC     R0
00C9 E6              430             MOV     A,@R0
00CA F9              431             MOV     R1,A
00CB 120000   F      432             LCALL   _?check_hex
00CE EF              433             MOV     A,R7
00CF 6401            434             XRL     A,#01H
00D1 7074            435             JNZ     ?C0009
                     436     ;         {
                     437                             ; SOURCE LINE # 110
                     438     ;             get_hex(in,ptr_hex);
                     439                             ; SOURCE LINE # 111
00D3 E500     F      440             MOV     A,?C_IBP
00D5 2403            441             ADD     A,#03H
00D7 F8              442             MOV     R0,A
00D8 8603            443             MOV     AR3,@R0
00DA 08              444             INC     R0
00DB E6              445             MOV     A,@R0
00DC FA              446             MOV     R2,A
00DD 08              447             INC     R0
00DE E6              448             MOV     A,@R0
00DF F9              449             MOV     R1,A
00E0 1500     F      450             DEC     ?C_IBP
00E2 1500     F      451             DEC     ?C_IBP
00E4 1500     F      452             DEC     ?C_IBP
00E6 A800     F      453             MOV     R0,?C_IBP
00E8 A603            454             MOV     @R0,AR3
00EA 08              455             INC     R0
00EB A602            456             MOV     @R0,AR2
00ED 08              457             INC     R0
00EE A601            458             MOV     @R0,AR1
00F0 7B00            459             MOV     R3,#00H
00F2 E500     F      460             MOV     A,?C_IBP
00F4 2411            461             ADD     A,#011H
00F6 F9              462             MOV     R1,A
00F7 7A00            463             MOV     R2,#00H
00F9 120000   F      464             LCALL   _?get_hex
                     465     ;             encrypt(out, in, key);      // encrypt "in" data by "key" and return encrypte
                             d data in "out"
                     466                             ; SOURCE LINE # 112
00FC 1500     F      467             DEC     ?C_IBP
00FE 1500     F      468             DEC     ?C_IBP
0100 1500     F      469             DEC     ?C_IBP
0102 A800     F      470             MOV     R0,?C_IBP
0104 7600            471             MOV     @R0,#00H
0106 08              472             INC     R0
0107 7600     F      473             MOV     @R0,#HIGH (key)
0109 08              474             INC     R0
010A 7600     F      475             MOV     @R0,#LOW (key)
010C E500     F      476             MOV     A,?C_IBP
010E 2411            477             ADD     A,#011H
0110 1500     F      478             DEC     ?C_IBP
0112 1500     F      479             DEC     ?C_IBP
0114 1500     F      480             DEC     ?C_IBP
0116 A800     F      481             MOV     R0,?C_IBP
0118 7600            482             MOV     @R0,#00H
011A 08              483             INC     R0
A51 MACRO ASSEMBLER  MAIN                                                                 07/14/2015 21:39:13 PAGE     9

011B 7600            484             MOV     @R0,#00H
011D 08              485             INC     R0
011E F6              486             MOV     @R0,A
011F 7B00            487             MOV     R3,#00H
0121 E500     F      488             MOV     A,?C_IBP
0123 240C            489             ADD     A,#0CH
0125 F9              490             MOV     R1,A
0126 7A00            491             MOV     R2,#00H
0128 120000   F      492             LCALL   _?encrypt
                     493     ;             uart_string(result);
                     494                             ; SOURCE LINE # 113
012B 7BFF            495             MOV     R3,#0FFH
012D 7A00     F      496             MOV     R2,#HIGH (result)
012F 7900     F      497             MOV     R1,#LOW (result)
0131 120000   F      498             LCALL   _uart_string
                     499     ;             uart_string(bin_to_string(out, 8));
                     500                             ; SOURCE LINE # 114
0134 7B00            501             MOV     R3,#00H
0136 E500     F      502             MOV     A,?C_IBP
0138 2406            503             ADD     A,#06H
013A F9              504             MOV     R1,A
013B 7A00            505             MOV     R2,#00H
013D 7D08            506             MOV     R5,#08H
013F 7C00            507             MOV     R4,#00H
0141 120000   F      508             LCALL   _bin_to_string
0144                 509     ?C0017:
                     510     ;         }
                     511                             ; SOURCE LINE # 115
0144 020000   F      512             LJMP    ?C0021
0147                 513     ?C0009:
                     514     ;         else
                     515     ;         {
                     516                             ; SOURCE LINE # 117
                     517     ;             uart_string(error_check_vlues);
                     518                             ; SOURCE LINE # 118
0147 7BFF            519             MOV     R3,#0FFH
0149 7A00     F      520             MOV     R2,#HIGH (error_check_vlues)
014B 7900     F      521             MOV     R1,#LOW (error_check_vlues)
014D                 522     ?C0018:
                     523     ;         }
                     524                             ; SOURCE LINE # 119
                     525     ;         break;
                     526                             ; SOURCE LINE # 120
014D 020000   F      527             LJMP    ?C0021
                     528     ; 
                     529     ;     case 3:
                     530                             ; SOURCE LINE # 122
0150                 531     ?C0011:
                     532     ;         //uart_string("DECRYPT");
                     533     ;         ptr_hex = check_in+8;
                     534                             ; SOURCE LINE # 124
0150 A800     F      535             MOV     R0,?C_IBP
0152 8603            536             MOV     AR3,@R0
0154 08              537             INC     R0
0155 E6              538             MOV     A,@R0
0156 FA              539             MOV     R2,A
0157 08              540             INC     R0
0158 E6              541             MOV     A,@R0
0159 2408            542             ADD     A,#08H
015B F9              543             MOV     R1,A
015C E4              544             CLR     A
015D 3A              545             ADDC    A,R2
015E FA              546             MOV     R2,A
015F E500     F      547             MOV     A,?C_IBP
0161 2403            548             ADD     A,#03H
0163 F8              549             MOV     R0,A
A51 MACRO ASSEMBLER  MAIN                                                                 07/14/2015 21:39:13 PAGE    10

0164 A603            550             MOV     @R0,AR3
0166 08              551             INC     R0
0167 A602            552             MOV     @R0,AR2
0169 08              553             INC     R0
016A A601            554             MOV     @R0,AR1
                     555     ;         if(check_hex(ptr_hex)==1)
                     556                             ; SOURCE LINE # 125
016C E500     F      557             MOV     A,?C_IBP
016E 2403            558             ADD     A,#03H
0170 F8              559             MOV     R0,A
0171 8603            560             MOV     AR3,@R0
0173 08              561             INC     R0
0174 E6              562             MOV     A,@R0
0175 FA              563             MOV     R2,A
0176 08              564             INC     R0
0177 E6              565             MOV     A,@R0
0178 F9              566             MOV     R1,A
0179 120000   F      567             LCALL   _?check_hex
017C EF              568             MOV     A,R7
017D 6401            569             XRL     A,#01H
017F 7073            570             JNZ     ?C0012
                     571     ;         {
                     572                             ; SOURCE LINE # 126
                     573     ;             get_hex(in,ptr_hex);
                     574                             ; SOURCE LINE # 127
0181 E500     F      575             MOV     A,?C_IBP
0183 2403            576             ADD     A,#03H
0185 F8              577             MOV     R0,A
0186 8603            578             MOV     AR3,@R0
0188 08              579             INC     R0
0189 E6              580             MOV     A,@R0
018A FA              581             MOV     R2,A
018B 08              582             INC     R0
018C E6              583             MOV     A,@R0
018D F9              584             MOV     R1,A
018E 1500     F      585             DEC     ?C_IBP
0190 1500     F      586             DEC     ?C_IBP
0192 1500     F      587             DEC     ?C_IBP
0194 A800     F      588             MOV     R0,?C_IBP
0196 A603            589             MOV     @R0,AR3
0198 08              590             INC     R0
0199 A602            591             MOV     @R0,AR2
019B 08              592             INC     R0
019C A601            593             MOV     @R0,AR1
019E 7B00            594             MOV     R3,#00H
01A0 E500     F      595             MOV     A,?C_IBP
01A2 2411            596             ADD     A,#011H
01A4 F9              597             MOV     R1,A
01A5 7A00            598             MOV     R2,#00H
01A7 120000   F      599             LCALL   _?get_hex
                     600     ;             decrypt(out, in, key);      // decrypt "in" data by "key" and return original
                              data in "out"
                     601                             ; SOURCE LINE # 128
01AA 1500     F      602             DEC     ?C_IBP
01AC 1500     F      603             DEC     ?C_IBP
01AE 1500     F      604             DEC     ?C_IBP
01B0 A800     F      605             MOV     R0,?C_IBP
01B2 7600            606             MOV     @R0,#00H
01B4 08              607             INC     R0
01B5 7600     F      608             MOV     @R0,#HIGH (key)
01B7 08              609             INC     R0
01B8 7600     F      610             MOV     @R0,#LOW (key)
01BA E500     F      611             MOV     A,?C_IBP
01BC 2411            612             ADD     A,#011H
01BE 1500     F      613             DEC     ?C_IBP
01C0 1500     F      614             DEC     ?C_IBP
A51 MACRO ASSEMBLER  MAIN                                                                 07/14/2015 21:39:13 PAGE    11

01C2 1500     F      615             DEC     ?C_IBP
01C4 A800     F      616             MOV     R0,?C_IBP
01C6 7600            617             MOV     @R0,#00H
01C8 08              618             INC     R0
01C9 7600            619             MOV     @R0,#00H
01CB 08              620             INC     R0
01CC F6              621             MOV     @R0,A
01CD 7B00            622             MOV     R3,#00H
01CF E500     F      623             MOV     A,?C_IBP
01D1 240C            624             ADD     A,#0CH
01D3 F9              625             MOV     R1,A
01D4 7A00            626             MOV     R2,#00H
01D6 120000   F      627             LCALL   _?decrypt
                     628     ;             uart_string(result);
                     629                             ; SOURCE LINE # 129
01D9 7BFF            630             MOV     R3,#0FFH
01DB 7A00     F      631             MOV     R2,#HIGH (result)
01DD 7900     F      632             MOV     R1,#LOW (result)
01DF 120000   F      633             LCALL   _uart_string
                     634     ;             uart_string(bin_to_string(out, 8));
                     635                             ; SOURCE LINE # 130
01E2 7B00            636             MOV     R3,#00H
01E4 E500     F      637             MOV     A,?C_IBP
01E6 2406            638             ADD     A,#06H
01E8 F9              639             MOV     R1,A
01E9 7A00            640             MOV     R2,#00H
01EB 7D08            641             MOV     R5,#08H
01ED 7C00            642             MOV     R4,#00H
01EF 120000   F      643             LCALL   _bin_to_string
01F2                 644     ?C0019:
                     645     ;         }
                     646                             ; SOURCE LINE # 131
01F2 800E            647             SJMP    ?C0021
01F4                 648     ?C0012:
                     649     ;         else
                     650     ;         {
                     651                             ; SOURCE LINE # 133
                     652     ;             uart_string(error_check_vlues);
                     653                             ; SOURCE LINE # 134
01F4 7BFF            654             MOV     R3,#0FFH
01F6 7A00     F      655             MOV     R2,#HIGH (error_check_vlues)
01F8 7900     F      656             MOV     R1,#LOW (error_check_vlues)
01FA                 657     ?C0020:
                     658     ;         }
                     659                             ; SOURCE LINE # 135
                     660     ;         break;
                     661                             ; SOURCE LINE # 136
01FA 8006            662             SJMP    ?C0021
                     663     ; 
                     664     ;     default:
                     665                             ; SOURCE LINE # 138
01FC                 666     ?C0014:
                     667     ;         uart_string(error);
                     668                             ; SOURCE LINE # 139
01FC 7BFF            669             MOV     R3,#0FFH
01FE 7A00     F      670             MOV     R2,#HIGH (error)
0200 7900     F      671             MOV     R1,#LOW (error)
0202                 672     ?C0021:
0202 120000   F      673             LCALL   _uart_string
                     674     ;     }
                     675                             ; SOURCE LINE # 140
                     676     ; }
                     677                             ; SOURCE LINE # 141
0205                 678     ?C0015:
0205 E500     F      679             MOV     A,?C_IBP
0207 2416            680             ADD     A,#016H
A51 MACRO ASSEMBLER  MAIN                                                                 07/14/2015 21:39:13 PAGE    12

0209 F500     F      681             MOV     ?C_IBP,A
020B 22              682             RET     
                     683     ; END OF _?desTest
                     684     
                     685             END
A51 MACRO ASSEMBLER  MAIN                                                                 07/14/2015 21:39:13 PAGE    13

SYMBOL TABLE LISTING
------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES

?C0001 . . . . . .  C ADDR   000CH   R   SEG=?PR?MAIN?MAIN
?C0005 . . . . . .  C ADDR   003BH   R   SEG=?PR?_?DESTEST?MAIN
?C0006 . . . . . .  C ADDR   0099H   R   SEG=?PR?_?DESTEST?MAIN
?C0008 . . . . . .  C ADDR   00A2H   R   SEG=?PR?_?DESTEST?MAIN
?C0009 . . . . . .  C ADDR   0147H   R   SEG=?PR?_?DESTEST?MAIN
?C0011 . . . . . .  C ADDR   0150H   R   SEG=?PR?_?DESTEST?MAIN
?C0012 . . . . . .  C ADDR   01F4H   R   SEG=?PR?_?DESTEST?MAIN
?C0014 . . . . . .  C ADDR   01FCH   R   SEG=?PR?_?DESTEST?MAIN
?C0015 . . . . . .  C ADDR   0205H   R   SEG=?PR?_?DESTEST?MAIN
?C0016 . . . . . .  C ADDR   009FH   R   SEG=?PR?_?DESTEST?MAIN
?C0017 . . . . . .  C ADDR   0144H   R   SEG=?PR?_?DESTEST?MAIN
?C0018 . . . . . .  C ADDR   014DH   R   SEG=?PR?_?DESTEST?MAIN
?C0019 . . . . . .  C ADDR   01F2H   R   SEG=?PR?_?DESTEST?MAIN
?C0020 . . . . . .  C ADDR   01FAH   R   SEG=?PR?_?DESTEST?MAIN
?C0021 . . . . . .  C ADDR   0202H   R   SEG=?PR?_?DESTEST?MAIN
?CO?MAIN . . . . .  C SEG    007DH       REL=UNIT
?C_IBP . . . . . .  D ADDR   -----       EXT
?C_STARTUP . . . .  C ADDR   -----       EXT
?DT?MAIN . . . . .  D SEG    0008H       REL=UNIT
?PR?MAIN?MAIN. . .  C SEG    0011H       REL=UNIT
?PR?_?DESTEST?MAIN  C SEG    020CH       REL=UNIT
?SC_0. . . . . . .  C ADDR   0000H   R   SEG=?CO?MAIN
AC . . . . . . . .  B ADDR   00D0H.6 A   
ACC. . . . . . . .  D ADDR   00E0H   A   
AR1. . . . . . . .  D ADDR   0001H   A   
AR2. . . . . . . .  D ADDR   0002H   A   
AR3. . . . . . . .  D ADDR   0003H   A   
B. . . . . . . . .  D ADDR   00F0H   A   
CP_RL2 . . . . . .  B ADDR   00C8H.0 A   
CY . . . . . . . .  B ADDR   00D0H.7 A   
C_T2 . . . . . . .  B ADDR   00C8H.1 A   
DPH. . . . . . . .  D ADDR   0083H   A   
DPL. . . . . . . .  D ADDR   0082H   A   
EA . . . . . . . .  B ADDR   00A8H.7 A   
ERROR. . . . . . .  C ADDR   003AH   R   SEG=?CO?MAIN
ERROR_CHECK_VLUES.  C ADDR   0065H   R   SEG=?CO?MAIN
ES . . . . . . . .  B ADDR   00A8H.4 A   
ET0. . . . . . . .  B ADDR   00A8H.1 A   
ET1. . . . . . . .  B ADDR   00A8H.3 A   
ET2. . . . . . . .  B ADDR   00A8H.5 A   
EX0. . . . . . . .  B ADDR   00A8H.0 A   
EX1. . . . . . . .  B ADDR   00A8H.2 A   
EXEN2. . . . . . .  B ADDR   00C8H.3 A   
EXF2 . . . . . . .  B ADDR   00C8H.6 A   
F0 . . . . . . . .  B ADDR   00D0H.5 A   
IE . . . . . . . .  D ADDR   00A8H   A   
IE0. . . . . . . .  B ADDR   0088H.1 A   
IE1. . . . . . . .  B ADDR   0088H.3 A   
INPUT. . . . . . .  C ADDR   002BH   R   SEG=?CO?MAIN
INT0 . . . . . . .  B ADDR   00B0H.2 A   
INT1 . . . . . . .  B ADDR   00B0H.3 A   
IP . . . . . . . .  D ADDR   00B8H   A   
IT0. . . . . . . .  B ADDR   0088H.0 A   
IT1. . . . . . . .  B ADDR   0088H.2 A   
KEY. . . . . . . .  D ADDR   0000H   R   SEG=?DT?MAIN
MAIN . . . . . . .  C ADDR   0000H   R   SEG=?PR?MAIN?MAIN
OV . . . . . . . .  B ADDR   00D0H.2 A   
P. . . . . . . . .  B ADDR   00D0H.0 A   
P0 . . . . . . . .  D ADDR   0080H   A   
P1 . . . . . . . .  D ADDR   0090H   A   
A51 MACRO ASSEMBLER  MAIN                                                                 07/14/2015 21:39:13 PAGE    14

P2 . . . . . . . .  D ADDR   00A0H   A   
P3 . . . . . . . .  D ADDR   00B0H   A   
PCON . . . . . . .  D ADDR   0087H   A   
PS . . . . . . . .  B ADDR   00B8H.4 A   
PSW. . . . . . . .  D ADDR   00D0H   A   
PT0. . . . . . . .  B ADDR   00B8H.1 A   
PT1. . . . . . . .  B ADDR   00B8H.3 A   
PT2. . . . . . . .  B ADDR   00B8H.5 A   
PX0. . . . . . . .  B ADDR   00B8H.0 A   
PX1. . . . . . . .  B ADDR   00B8H.2 A   
RB8. . . . . . . .  B ADDR   0098H.2 A   
RCAP2H . . . . . .  D ADDR   00CBH   A   
RCAP2L . . . . . .  D ADDR   00CAH   A   
RCLK . . . . . . .  B ADDR   00C8H.5 A   
RD . . . . . . . .  B ADDR   00B0H.7 A   
REN. . . . . . . .  B ADDR   0098H.4 A   
RESULT . . . . . .  C ADDR   0032H   R   SEG=?CO?MAIN
RI . . . . . . . .  B ADDR   0098H.0 A   
RS0. . . . . . . .  B ADDR   00D0H.3 A   
RS1. . . . . . . .  B ADDR   00D0H.4 A   
RXD. . . . . . . .  B ADDR   00B0H.0 A   
SBUF . . . . . . .  D ADDR   0099H   A   
SCON . . . . . . .  D ADDR   0098H   A   
SM0. . . . . . . .  B ADDR   0098H.7 A   
SM1. . . . . . . .  B ADDR   0098H.6 A   
SM2. . . . . . . .  B ADDR   0098H.5 A   
SP . . . . . . . .  D ADDR   0081H   A   
T0 . . . . . . . .  B ADDR   00B0H.4 A   
T1 . . . . . . . .  B ADDR   00B0H.5 A   
T2 . . . . . . . .  B ADDR   0090H.0 A   
T2CON. . . . . . .  D ADDR   00C8H   A   
T2EX . . . . . . .  B ADDR   0090H.1 A   
TB8. . . . . . . .  B ADDR   0098H.3 A   
TCLK . . . . . . .  B ADDR   00C8H.4 A   
TCON . . . . . . .  D ADDR   0088H   A   
TF0. . . . . . . .  B ADDR   0088H.5 A   
TF1. . . . . . . .  B ADDR   0088H.7 A   
TF2. . . . . . . .  B ADDR   00C8H.7 A   
TH0. . . . . . . .  D ADDR   008CH   A   
TH1. . . . . . . .  D ADDR   008DH   A   
TH2. . . . . . . .  D ADDR   00CDH   A   
TI . . . . . . . .  B ADDR   0098H.1 A   
TL0. . . . . . . .  D ADDR   008AH   A   
TL1. . . . . . . .  D ADDR   008BH   A   
TL2. . . . . . . .  D ADDR   00CCH   A   
TMOD . . . . . . .  D ADDR   0089H   A   
TR0. . . . . . . .  B ADDR   0088H.4 A   
TR1. . . . . . . .  B ADDR   0088H.6 A   
TR2. . . . . . . .  B ADDR   00C8H.2 A   
TXD. . . . . . . .  B ADDR   00B0H.1 A   
UART_INIT. . . . .  C ADDR   -----       EXT
WELCOME. . . . . .  C ADDR   0022H   R   SEG=?CO?MAIN
WR . . . . . . . .  B ADDR   00B0H.6 A   
_?CHECK_HEX. . . .  C ADDR   -----       EXT
_?DECRYPT. . . . .  C ADDR   -----       EXT
_?DESTEST. . . . .  C ADDR   0000H   R   SEG=?PR?_?DESTEST?MAIN
_?ENCRYPT. . . . .  C ADDR   -----       EXT
_?GET_HEX. . . . .  C ADDR   -----       EXT
_?OPERATION. . . .  C ADDR   -----       EXT
_?UART_GETSTRING .  C ADDR   -----       EXT
_BIN_TO_STRING . .  C ADDR   -----       EXT
_UART_STRING . . .  C ADDR   -----       EXT


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
