; .\terminal.SRC generated from: terminal.c
; COMPILER INVOKED BY:
;        C:\Keil\C51\BIN\C51.EXE terminal.c BROWSE DEBUG OBJECTEXTEND CODE LISTINCLUDE SRC(.\terminal.SRC)


NAME	TERMINAL

?PR?_?operation?TERMINAL                 SEGMENT CODE 
?PR?_?check_hex?TERMINAL                 SEGMENT CODE 
?PR?_?get_hex?TERMINAL                   SEGMENT CODE 
?PR?_bin_to_string?TERMINAL              SEGMENT CODE 
?DT?TERMINAL         SEGMENT DATA 
?DT?_bin_to_string?TERMINAL              SEGMENT DATA OVERLAYABLE 
?PR?_?str_comp?TERMINAL                  SEGMENT CODE 
?CO?TERMINAL         SEGMENT CODE 
	EXTRN	DATA (?C_IBP)
	EXTRN	CODE (?C?CLDOPTR)
	EXTRN	CODE (?C?CSTOPTR)
	EXTRN	CODE (?C?CSTPTR)
	PUBLIC	decimal2hex
	PUBLIC	operation_chose
	PUBLIC	_?str_comp
	PUBLIC	_bin_to_string
	PUBLIC	_?get_hex
	PUBLIC	_?check_hex
	PUBLIC	_?operation

	RSEG  ?DT?_bin_to_string?TERMINAL
?_bin_to_string?BYTE:
      input?340:   DS   3
	ORG  3
     nbytes?341:   DS   2
	ORG  5
 output_ptr?344:   DS   3

	RSEG  ?DT?TERMINAL
     output?343:   DS   67

	RSEG  ?CO?TERMINAL
operation_chose:
	DB  'S' ,'E' ,'T' ,'K' ,'E' ,'Y' ,000H

	DB  000H

	DB  'E' ,'N' ,'C' ,'R' ,'Y' ,'P' ,'T' ,000H

	DB  'D' ,'E' ,'C' ,'R' ,'Y' ,'P' ,'T' ,000H


decimal2hex:
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H

; /*
; *************************************************************************************************************
; *                                        UART Communication
; 
; * File : UART.C
; * By   : github.com
; *************************************************************************************************************
; */
; #include "TERMINAL.H"
; 
; /*
; **************************************************************************************************************
; *                                               VARIABLES
; **************************************************************************************************************
; */
; 
; code uint8_t operation_chose[3][8] = {"SETKEY","ENCRYPT","DECRYPT"};
; 
; code uint8_t decimal2hex[] = {'0', '1', '2', '3', '4',
;                              '5', '6', '7', '8', '9',
;                              'A','B','C','D','E','F'
;                             };
; 
; /*$PAGE*/
; /*
; *********************************************************************************************************
; *                                              operation check
; *
; * Description: This function is used to check the input from terminal to chose the operation
; *
; * Arguments  : in	    is a pointer to the input data come from terminal.
; *
; * Returns    : =1		SETKEY chosen
; *
; *			   =2		ENCRYPT	chosen
; *
; *			   =3		DECRYPT	chosen
; *
; *			   =0      	wrong entered
; *********************************************************************************************************
; */
; uint8_t operation(uint8_t *in) reentrant

	RSEG  ?PR?_?operation?TERMINAL
_?operation:
	USING	0
			; SOURCE LINE # 42
	DEC  	?C_IBP
	DEC  	?C_IBP
	DEC  	?C_IBP
	MOV  	R0,?C_IBP
	MOV  	@R0,AR3
	INC  	R0
	MOV  	@R0,AR2
	INC  	R0
	MOV  	@R0,AR1
; {
;     if(str_comp(in, &operation_chose[0], 6))
			; SOURCE LINE # 44
	DEC  	?C_IBP
	MOV  	R0,?C_IBP
	MOV  	@R0,#06H
	DEC  	?C_IBP
	DEC  	?C_IBP
	DEC  	?C_IBP
	MOV  	R0,?C_IBP
	MOV  	@R0,#0FFH
	INC  	R0
	MOV  	@R0,#HIGH (operation_chose)
	INC  	R0
	MOV  	@R0,#LOW (operation_chose)
	LCALL	L?0039
	MOV  	A,R7
	JZ   	?C0001
;         return 1;
			; SOURCE LINE # 45
	MOV  	R7,#01H
	SJMP 	?C0002
?C0001:
; 
;     if(str_comp(in, &operation_chose[1], 6))
			; SOURCE LINE # 47
	LCALL	L?0038
	MOV  	A,R7
	JZ   	?C0003
;         return 2;
			; SOURCE LINE # 48
	MOV  	R7,#02H
	SJMP 	?C0002
?C0003:
; 
;     if(str_comp(in, &operation_chose[1], 6))
			; SOURCE LINE # 50
	LCALL	L?0038
	MOV  	A,R7
	JZ   	?C0004
;         return 3;
			; SOURCE LINE # 51
	MOV  	R7,#03H
	SJMP 	?C0002
?C0004:
; 
;     return 0;
			; SOURCE LINE # 53
	MOV  	R7,#00H
; }
			; SOURCE LINE # 54
?C0002:
	INC  	?C_IBP
	INC  	?C_IBP
	INC  	?C_IBP
	RET  	
; END OF _?operation

; 
; /*$PAGE*/
; /*
; *********************************************************************************************************
; *                                              check hex data input
; *
; * Description: This function is used to check the hex input from terminal is already hex
; *
; * Arguments  : in	    is a pointer to the input data come from terminal.
; *
; * Returns    : =1		data is hex
; *
; *			   =0      	wrong data entered
; *********************************************************************************************************
; */
; uint8_t check_hex(uint8_t *in) reentrant

	RSEG  ?PR?_?check_hex?TERMINAL
_?check_hex:
	USING	0
			; SOURCE LINE # 70
	DEC  	?C_IBP
	DEC  	?C_IBP
	DEC  	?C_IBP
	MOV  	R0,?C_IBP
	MOV  	@R0,AR3
	INC  	R0
	MOV  	@R0,AR2
	INC  	R0
	MOV  	@R0,AR1
	DEC  	?C_IBP
	DEC  	?C_IBP
	DEC  	?C_IBP
; {
;     uint8_t i, j,check=0;
			; SOURCE LINE # 72
	MOV  	R0,?C_IBP
	INC  	R0
	INC  	R0
	CLR  	A
	MOV  	@R0,A
;     for(i = 0; i<16; i++)
			; SOURCE LINE # 73
	MOV  	R0,?C_IBP
	MOV  	@R0,A
?C0005:
	MOV  	R0,?C_IBP
	MOV  	A,@R0
	CLR  	C
	SUBB 	A,#010H
	JNC  	?C0006
;     {
			; SOURCE LINE # 74
;         for(j = 0; j<16; j++)
			; SOURCE LINE # 75
	INC  	R0
	CLR  	A
	MOV  	@R0,A
?C0008:
	MOV  	R0,?C_IBP
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	CLR  	C
	SUBB 	A,#010H
	JNC  	?C0009
;             if(in[i]==decimal2hex[j])
			; SOURCE LINE # 76
	MOV  	A,?C_IBP
	ADD  	A,#03H
	MOV  	R0,A
	MOV  	AR3,@R0
	INC  	R0
	MOV  	A,@R0
	MOV  	R2,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R1,A
	MOV  	R0,?C_IBP
	MOV  	A,@R0
	MOV  	DPL,A
	MOV  	DPH,#00H
	LCALL	?C?CLDOPTR
	MOV  	R6,A
	MOV  	A,R7
	MOV  	DPTR,#decimal2hex
	MOVC 	A,@A+DPTR
	CJNE 	A,AR6,?C0010
;                 check=1;
			; SOURCE LINE # 77
	MOV  	R0,?C_IBP
	INC  	R0
	INC  	R0
	MOV  	@R0,#01H
?C0010:
	MOV  	R0,?C_IBP
	INC  	R0
	INC  	@R0
	SJMP 	?C0008
?C0009:
;         if(check==0)
			; SOURCE LINE # 78
	MOV  	R0,?C_IBP
	INC  	R0
	INC  	R0
	MOV  	A,@R0
	JNZ  	?C0007
;             return 0;
			; SOURCE LINE # 79
	MOV  	R7,A
	SJMP 	?C0013
;     }
			; SOURCE LINE # 80
?C0007:
	MOV  	R0,?C_IBP
	INC  	@R0
	SJMP 	?C0005
?C0006:
;     return 1;
			; SOURCE LINE # 81
	MOV  	R7,#01H
; }
			; SOURCE LINE # 82
?C0013:
	MOV  	A,?C_IBP
	ADD  	A,#06H
	MOV  	?C_IBP,A
	RET  	
; END OF _?check_hex

; 
; /*$PAGE*/
; /*
; *********************************************************************************************************
; *                                              get hex from string input
; *
; * Description: This function is used to get hex from string input from terminal.
; *
; * Arguments  : out	  pointer to the block (64 bit = 8 byte) where the converted data is written to
; *
; *              in     pointer to the block (64 bit = 8 byte) where the terminal data come
; *
; * Returns    : None
; *********************************************************************************************************
; */
; void get_hex(uint8_t* out,uint8_t* in) reentrant

	RSEG  ?PR?_?get_hex?TERMINAL
_?get_hex:
	USING	0
			; SOURCE LINE # 98
	DEC  	?C_IBP
	DEC  	?C_IBP
	DEC  	?C_IBP
	MOV  	R0,?C_IBP
	MOV  	@R0,AR3
	INC  	R0
	MOV  	@R0,AR2
	INC  	R0
	MOV  	@R0,AR1
	MOV  	A,?C_IBP
	ADD  	A,#0FCH
	MOV  	?C_IBP,A
; {
;     uint8_t i, j,hex_value=0,next=0;
			; SOURCE LINE # 100
	MOV  	R0,A
	INC  	R0
	INC  	R0
	CLR  	A
	MOV  	@R0,A
	MOV  	A,?C_IBP
	ADD  	A,#03H
	MOV  	R0,A
	CLR  	A
	MOV  	@R0,A
;     for(i = 0; i<16; i++)
			; SOURCE LINE # 101
	MOV  	R0,?C_IBP
	MOV  	@R0,A
?C0014:
	MOV  	R0,?C_IBP
	MOV  	A,@R0
	CLR  	C
	SUBB 	A,#010H
	JC   	$ + 5H
	LJMP 	?C0023
;     {
			; SOURCE LINE # 102
;         for(j = 0; j<16; j++)
			; SOURCE LINE # 103
	INC  	R0
	CLR  	A
	MOV  	@R0,A
?C0017:
	MOV  	R0,?C_IBP
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	CLR  	C
	SUBB 	A,#010H
	JNC  	?C0018
;         {
			; SOURCE LINE # 104
;             if(in[i]==decimal2hex[j])
			; SOURCE LINE # 105
	MOV  	A,?C_IBP
	ADD  	A,#07H
	MOV  	R0,A
	MOV  	AR3,@R0
	INC  	R0
	MOV  	A,@R0
	MOV  	R2,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R1,A
	MOV  	R0,?C_IBP
	MOV  	A,@R0
	MOV  	DPL,A
	MOV  	DPH,#00H
	LCALL	?C?CLDOPTR
	MOV  	R6,A
	MOV  	A,R7
	MOV  	DPTR,#decimal2hex
	MOVC 	A,@A+DPTR
	CJNE 	A,AR6,?C0019
;             {
			; SOURCE LINE # 106
;                 hex_value|=j;
			; SOURCE LINE # 107
	MOV  	R0,?C_IBP
	INC  	R0
	INC  	R0
	PUSH 	AR0
	MOV  	R1,AR0
	MOV  	R0,?C_IBP
	INC  	R0
	MOV  	A,@R1
	ORL  	A,@R0
	POP  	AR0
	MOV  	@R0,A
;                 break;
			; SOURCE LINE # 108
	SJMP 	?C0018
;             }
			; SOURCE LINE # 109
;         }
			; SOURCE LINE # 110
?C0019:
	MOV  	R0,?C_IBP
	INC  	R0
	INC  	@R0
	SJMP 	?C0017
?C0018:
;         if(i==1||i==3||i==5||i==7||i==9||i==11||i==13||i==15)
			; SOURCE LINE # 111
	MOV  	R0,?C_IBP
	MOV  	A,@R0
	MOV  	R7,A
	XRL  	A,#01H
	JZ   	?C0022
	MOV  	A,R7
	XRL  	A,#03H
	JZ   	?C0022
	MOV  	A,R7
	XRL  	A,#05H
	JZ   	?C0022
	MOV  	A,R7
	XRL  	A,#07H
	JZ   	?C0022
	MOV  	A,R7
	XRL  	A,#09H
	JZ   	?C0022
	MOV  	A,R7
	XRL  	A,#0BH
	JZ   	?C0022
	MOV  	A,R7
	XRL  	A,#0DH
	JZ   	?C0022
	MOV  	A,R7
	CJNE 	A,#0FH,?C0021
?C0022:
;         {
			; SOURCE LINE # 112
;             out[next++] = hex_value;
			; SOURCE LINE # 113
	MOV  	R0,?C_IBP
	INC  	R0
	INC  	R0
	MOV  	A,@R0
	MOV  	R7,A
	MOV  	A,?C_IBP
	ADD  	A,#04H
	MOV  	R0,A
	MOV  	AR3,@R0
	INC  	R0
	MOV  	A,@R0
	MOV  	R2,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R1,A
	MOV  	A,?C_IBP
	ADD  	A,#03H
	MOV  	R0,A
	MOV  	A,@R0
	INC  	@R0
	MOV  	DPL,A
	MOV  	DPH,#00H
	MOV  	A,R7
	LCALL	?C?CSTOPTR
;             hex_value =0;
			; SOURCE LINE # 114
	MOV  	R0,?C_IBP
	INC  	R0
	INC  	R0
	CLR  	A
	MOV  	@R0,A
;         }
			; SOURCE LINE # 115
?C0021:
;         hex_value=hex_value<<4;
			; SOURCE LINE # 116
	MOV  	R0,?C_IBP
	INC  	R0
	INC  	R0
	PUSH 	AR0
	MOV  	A,@R0
	SWAP 	A
	ANL  	A,#0F0H
	POP  	AR0
	MOV  	@R0,A
;     }
			; SOURCE LINE # 117
	MOV  	R0,?C_IBP
	INC  	@R0
	LJMP 	?C0014
; }
			; SOURCE LINE # 118
?C0023:
	MOV  	A,?C_IBP
	ADD  	A,#0AH
	MOV  	?C_IBP,A
	RET  	
; END OF _?get_hex

; 
; /*$PAGE*/
; /*
; *********************************************************************************************************
; *                                      binary to string
; *
; * Description: This function use to convert data from binary to string
; *
; * Arguments  : input    is a point to the array want to be converted.
; *
; *			   nbytes	is a char that represent the number of array.
; *
; * Returns    : output	is a point to the 1st element of string.
; *********************************************************************************************************
; */
; char* bin_to_string(const unsigned char input[], int nbytes)

	RSEG  ?PR?_bin_to_string?TERMINAL
_bin_to_string:
	USING	0
			; SOURCE LINE # 134
	MOV  	input?340,R3
	MOV  	input?340+01H,R2
	MOV  	input?340+02H,R1
	MOV  	nbytes?341,R4
	MOV  	nbytes?341+01H,R5
; {
			; SOURCE LINE # 135
;     int i;
;     static char output[64 + 3];
;     char* output_ptr = output;
			; SOURCE LINE # 138
	MOV  	output_ptr?344,#00H
	MOV  	output_ptr?344+01H,#HIGH (output?343)
	MOV  	output_ptr?344+02H,#LOW (output?343)
;     *output_ptr++ = '0';
			; SOURCE LINE # 139
	MOV  	R3,output_ptr?344
	INC  	output_ptr?344+02H
	MOV  	A,output_ptr?344+02H
	MOV  	R2,output_ptr?344+01H
	JNZ  	?C0032
	INC  	output_ptr?344+01H
?C0032:
	DEC  	A
	MOV  	R1,A
	MOV  	A,#030H
	LCALL	?C?CSTPTR
;     *output_ptr++ = 'x';
			; SOURCE LINE # 140
	MOV  	R3,output_ptr?344
	INC  	output_ptr?344+02H
	MOV  	A,output_ptr?344+02H
	MOV  	R2,output_ptr?344+01H
	JNZ  	?C0033
	INC  	output_ptr?344+01H
?C0033:
	DEC  	A
	MOV  	R1,A
	MOV  	A,#078H
	LCALL	?C?CSTPTR
;     for (i=0; i<nbytes; i++)
			; SOURCE LINE # 141
;---- Variable 'i?342' assigned to Register 'R6/R7' ----
	CLR  	A
	MOV  	R7,A
	MOV  	R6,A
?C0024:
	CLR  	C
	MOV  	A,R7
	SUBB 	A,nbytes?341+01H
	MOV  	A,nbytes?341
	XRL  	A,#080H
	MOV  	R0,A
	MOV  	A,R6
	XRL  	A,#080H
	SUBB 	A,R0
	JNC  	?C0025
;     {
			; SOURCE LINE # 142
;         *output_ptr++ = decimal2hex[(input[i]&0xF0)>>4];
			; SOURCE LINE # 143
	MOV  	R3,input?340
	MOV  	R2,input?340+01H
	MOV  	R1,input?340+02H
	MOV  	DPL,R7
	MOV  	DPH,R6
	LCALL	?C?CLDOPTR
	ANL  	A,#0F0H
	SWAP 	A
	ANL  	A,#0FH
	MOV  	DPTR,#decimal2hex
	MOVC 	A,@A+DPTR
	MOV  	R5,A
	MOV  	R3,output_ptr?344
	INC  	output_ptr?344+02H
	MOV  	A,output_ptr?344+02H
	MOV  	R2,output_ptr?344+01H
	JNZ  	?C0034
	INC  	output_ptr?344+01H
?C0034:
	DEC  	A
	MOV  	R1,A
	MOV  	A,R5
	LCALL	?C?CSTPTR
;         *output_ptr++ = decimal2hex[(input[i]&0x0F)];
			; SOURCE LINE # 144
	MOV  	R3,input?340
	MOV  	R2,input?340+01H
	MOV  	R1,input?340+02H
	MOV  	DPL,R7
	MOV  	DPH,R6
	LCALL	?C?CLDOPTR
	ANL  	A,#0FH
	MOV  	DPTR,#decimal2hex
	MOVC 	A,@A+DPTR
	MOV  	R5,A
	MOV  	R3,output_ptr?344
	INC  	output_ptr?344+02H
	MOV  	A,output_ptr?344+02H
	MOV  	R2,output_ptr?344+01H
	JNZ  	?C0035
	INC  	output_ptr?344+01H
?C0035:
	DEC  	A
	MOV  	R1,A
	MOV  	A,R5
	LCALL	?C?CSTPTR
;     }
			; SOURCE LINE # 145
	INC  	R7
	CJNE 	R7,#00H,?C0036
	INC  	R6
?C0036:
	SJMP 	?C0024
?C0025:
;     *output_ptr++ = '\r';
			; SOURCE LINE # 146
	MOV  	R3,output_ptr?344
	INC  	output_ptr?344+02H
	MOV  	A,output_ptr?344+02H
	MOV  	R2,output_ptr?344+01H
	JNZ  	?C0037
	INC  	output_ptr?344+01H
?C0037:
	DEC  	A
	MOV  	R1,A
	MOV  	A,#0DH
	LCALL	?C?CSTPTR
;     *output_ptr = '\0';
			; SOURCE LINE # 147
	MOV  	R3,output_ptr?344
	MOV  	R2,output_ptr?344+01H
	MOV  	R1,output_ptr?344+02H
	CLR  	A
	LCALL	?C?CSTPTR
;     return output;
			; SOURCE LINE # 148
	MOV  	R3,A
	MOV  	R2,#HIGH (output?343)
	MOV  	R1,#LOW (output?343)
; }
			; SOURCE LINE # 149
?C0027:
	RET  	
; END OF _bin_to_string

; 
; /*$PAGE*/
; /*
; *********************************************************************************************************
; *                                              string compare
; *
; * Description: This function is used to compare between tow string in certin n bytes.
; *
; * Arguments  : str1	  	pointer to the 1st element of 1st string
; *
; *              str2   	pointer to the 2nd element of 2nd string
; *
; *              nbytes	number of bytes
; *
; * Returns  =1  of str1 match with str2
; *
; *		   =0  of str1 dosnt match with str2
; *********************************************************************************************************
; */
; uint8_t str_comp(uint8_t* str1,uint8_t* str2, uint8_t nbytes) reentrant

	RSEG  ?PR?_?str_comp?TERMINAL
L?0038:
	USING	0
	DEC  	?C_IBP
	MOV  	R0,?C_IBP
	MOV  	@R0,#06H
	DEC  	?C_IBP
	DEC  	?C_IBP
	DEC  	?C_IBP
	MOV  	R0,?C_IBP
	MOV  	@R0,#0FFH
	INC  	R0
	MOV  	@R0,#HIGH (operation_chose+08H)
	INC  	R0
	MOV  	@R0,#LOW (operation_chose+08H)
L?0039:
	MOV  	A,?C_IBP
	ADD  	A,#04H
	MOV  	R0,A
	MOV  	AR3,@R0
	INC  	R0
	MOV  	A,@R0
	MOV  	R2,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R1,A
_?str_comp:
	USING	0
			; SOURCE LINE # 169
	DEC  	?C_IBP
	DEC  	?C_IBP
	DEC  	?C_IBP
	MOV  	R0,?C_IBP
	MOV  	@R0,AR3
	INC  	R0
	MOV  	@R0,AR2
	INC  	R0
	MOV  	@R0,AR1
	DEC  	?C_IBP
; {
;     uint8_t i=0;
			; SOURCE LINE # 171
	MOV  	R0,?C_IBP
	CLR  	A
	MOV  	@R0,A
?C0028:
;     while(i < nbytes)
			; SOURCE LINE # 172
	MOV  	A,?C_IBP
	ADD  	A,#07H
	MOV  	R1,A
	MOV  	R0,?C_IBP
	MOV  	A,@R0
	MOV  	R7,A
	CLR  	C
	SUBB 	A,@R1
	JNC  	?C0029
;     {
			; SOURCE LINE # 173
;         if(str1[i]!=str2[i])
			; SOURCE LINE # 174
	MOV  	A,?C_IBP
	ADD  	A,#04H
	MOV  	R0,A
	MOV  	AR3,@R0
	INC  	R0
	MOV  	A,@R0
	MOV  	R2,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R1,A
	MOV  	DPL,R7
	MOV  	DPH,#00H
	LCALL	?C?CLDOPTR
	MOV  	R6,A
	MOV  	R0,?C_IBP
	INC  	R0
	MOV  	AR3,@R0
	INC  	R0
	MOV  	A,@R0
	MOV  	R2,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R1,A
	MOV  	DPL,R7
	MOV  	DPH,#00H
	LCALL	?C?CLDOPTR
	XRL  	A,R6
	JZ   	?C0030
; 			return 0;
			; SOURCE LINE # 175
	MOV  	R7,#00H
	SJMP 	?C0031
?C0030:
; 		i++;
			; SOURCE LINE # 176
	MOV  	R0,?C_IBP
	INC  	@R0
; 	}
			; SOURCE LINE # 177
	SJMP 	?C0028
?C0029:
; 	return 1;
			; SOURCE LINE # 178
	MOV  	R7,#01H
; }			; SOURCE LINE # 179
?C0031:
	MOV  	A,?C_IBP
	ADD  	A,#08H
	MOV  	?C_IBP,A
	RET  	
; END OF _?str_comp

	END
