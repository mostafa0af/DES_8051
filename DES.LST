C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE DES
OBJECT MODULE PLACED IN DES.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE DES.c BROWSE DEBUG OBJECTEXTEND CODE LISTINCLUDE

line level    source

   1          /*
   2          *********************************************************************************************************
   3          *                                        DES-Algorithm-Implementation
   4          *                                          Data Encryption Standard
   5          *
   6          *                                           (c) Copyright 2015
   7          *                                           All Rights Reserved
   8          *
   9          * Original version taken from the AVR-Crypto-Lib
  10          * (http://www.das-labor.org/wiki/AVR-Crypto-Lib)
  11          * Copyright (C) 2006-2010  Daniel Otte (daniel.otte@rub.de)
  12          *
  13          * This program is free software: you can redistribute it and/or modify
  14          * it under the terms of the GNU General Public License as published by
  15          * the Free Software Foundation, either version 3 of the License, or
  16          * (at your option) any later version.
  17          *
  18          * This program is distributed in the hope that it will be useful,
  19          * but WITHOUT ANY WARRANTY; without even the implied warranty of
  20          * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  21          * GNU General Public License for more details.
  22          *
  23          * You should have received a copy of the GNU General Public License
  24          * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  25          *
  26          * File    : DES.C
  27          * By      : Mostafa Abd El-Fatah, 2015
  28          * Version : V1
  29          *
  30          *********************************************************************************************************
  31          */
  32          
  33          
  34          #include "DES.h"
   1      =1  
   2      =1  #ifndef DES_h
   3      =1  #define DES_h
   4      =1  
   5      =1  #include <string.h>
   1      =2  /*--------------------------------------------------------------------------
   2      =2  STRING.H
   3      =2  
   4      =2  String functions.
   5      =2  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =2  All rights reserved.
   7      =2  --------------------------------------------------------------------------*/
   8      =2  
   9      =2  #ifndef __STRING_H__
  10      =2  #define __STRING_H__
  11      =2  
  12      =2  #ifndef _SIZE_T
  13      =2   #define _SIZE_T
  14      =2   typedef unsigned int size_t;
  15      =2  #endif
  16      =2  
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 2   

  17      =2  #ifndef NULL
  18      =2   #define NULL ((void *) 0L)
  19      =2  #endif
  20      =2  
  21      =2  #pragma SAVE
  22      =2  #pragma REGPARMS
  23      =2  extern char *strcat (char *s1, char *s2);
  24      =2  extern char *strncat (char *s1, char *s2, int n);
  25      =2  
  26      =2  extern char strcmp (char *s1, char *s2);
  27      =2  extern char strncmp (char *s1, char *s2, int n);
  28      =2  
  29      =2  extern char *strcpy (char *s1, char *s2);
  30      =2  extern char *strncpy (char *s1, char *s2, int n);
  31      =2  
  32      =2  extern int strlen (char *);
  33      =2  
  34      =2  extern char *strchr (const char *s, char c);
  35      =2  extern int strpos (const char *s, char c);
  36      =2  extern char *strrchr (const char *s, char c);
  37      =2  extern int strrpos (const char *s, char c);
  38      =2  
  39      =2  extern int strspn (char *s, char *set);
  40      =2  extern int strcspn (char *s, char *set);
  41      =2  extern char *strpbrk (char *s, char *set);
  42      =2  extern char *strrpbrk (char *s, char *set);
  43      =2  extern char *strstr  (char *s, char *sub);
  44      =2  extern char *strtok  (char *str, const char *set);
  45      =2  
  46      =2  extern char memcmp (void *s1, void *s2, int n);
  47      =2  extern void *memcpy (void *s1, void *s2, int n);
  48      =2  extern void *memchr (void *s, char val, int n);
  49      =2  extern void *memccpy (void *s1, void *s2, char val, int n);
  50      =2  extern void *memmove (void *s1, void *s2, int n);
  51      =2  extern void *memset  (void *s, char val, int n);
  52      =2  #pragma RESTORE
  53      =2  
  54      =2  #endif
   6      =1  #include "datatypes.h"
   1      =2  #ifndef datatypes_h
   2      =2  #define datatypes_h
   3      =2  
   4      =2  typedef signed char             int8_t;
   5      =2  typedef unsigned char           uint8_t;
   6      =2  typedef short                           int16_t;
   7      =2  typedef unsigned short          uint16_t;
   8      =2  typedef long int                        int32_t;
   9      =2  typedef unsigned long int       uint32_t;
  10      =2  typedef uint32_t                        uint64_t[2];
  11      =2  
  12      =2  #endif
  13      =2  
   7      =1  
   8      =1  /*$PAGE*/
   9      =1  /*
  10      =1  *********************************************************************************************************
  11      =1  *                                       FUNCTION PROTOTYPES
  12      =1  *********************************************************************************************************
  13      =1  */
  14      =1  void encrypt(void* out, const void* in, const void* key) reentrant;
  15      =1  
  16      =1  void decrypt(void* out, const void* in, const uint8_t* key) reentrant;
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 3   

  17      =1  
  18      =1  void permute(const uint8_t *ptable, const uint8_t *in, uint8_t *out) reentrant;
  19      =1  
  20      =1  void changeendian32(uint32_t * a) reentrant;
  21      =1  
  22      =1  void shiftkey(uint8_t *key) reentrant;
  23      =1  
  24      =1  void shiftkey_inv(uint8_t *key) reentrant;
  25      =1  
  26      =1  void splitin6bitwords(const unsigned char a[]) reentrant;
  27      =1  
  28      =1  uint8_t substitute(uint8_t a, uint8_t * sbp) reentrant;
  29      =1  
  30      =1  uint32_t des_f(uint32_t r, uint8_t* kr) reentrant;
  31      =1  
  32      =1  #endif
  33      =1  
  34      =1  
  35          #include "uart.h"
   1      =1  #ifndef UART_h
   2      =1  #define UART_h
   3      =1  
   4      =1  #include <REG52.H>
   1      =2  /*--------------------------------------------------------------------------
   2      =2  REG52.H
   3      =2  
   4      =2  Header file for generic 80C52 and 80C32 microcontroller.
   5      =2  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =2  All rights reserved.
   7      =2  --------------------------------------------------------------------------*/
   8      =2  
   9      =2  #ifndef __REG52_H__
  10      =2  #define __REG52_H__
  11      =2  
  12      =2  /*  BYTE Registers  */
  13      =2  sfr P0    = 0x80;
  14      =2  sfr P1    = 0x90;
  15      =2  sfr P2    = 0xA0;
  16      =2  sfr P3    = 0xB0;
  17      =2  sfr PSW   = 0xD0;
  18      =2  sfr ACC   = 0xE0;
  19      =2  sfr B     = 0xF0;
  20      =2  sfr SP    = 0x81;
  21      =2  sfr DPL   = 0x82;
  22      =2  sfr DPH   = 0x83;
  23      =2  sfr PCON  = 0x87;
  24      =2  sfr TCON  = 0x88;
  25      =2  sfr TMOD  = 0x89;
  26      =2  sfr TL0   = 0x8A;
  27      =2  sfr TL1   = 0x8B;
  28      =2  sfr TH0   = 0x8C;
  29      =2  sfr TH1   = 0x8D;
  30      =2  sfr IE    = 0xA8;
  31      =2  sfr IP    = 0xB8;
  32      =2  sfr SCON  = 0x98;
  33      =2  sfr SBUF  = 0x99;
  34      =2  
  35      =2  /*  8052 Extensions  */
  36      =2  sfr T2CON  = 0xC8;
  37      =2  sfr RCAP2L = 0xCA;
  38      =2  sfr RCAP2H = 0xCB;
  39      =2  sfr TL2    = 0xCC;
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 4   

  40      =2  sfr TH2    = 0xCD;
  41      =2  
  42      =2  
  43      =2  /*  BIT Registers  */
  44      =2  /*  PSW  */
  45      =2  sbit CY    = PSW^7;
  46      =2  sbit AC    = PSW^6;
  47      =2  sbit F0    = PSW^5;
  48      =2  sbit RS1   = PSW^4;
  49      =2  sbit RS0   = PSW^3;
  50      =2  sbit OV    = PSW^2;
  51      =2  sbit P     = PSW^0; //8052 only
  52      =2  
  53      =2  /*  TCON  */
  54      =2  sbit TF1   = TCON^7;
  55      =2  sbit TR1   = TCON^6;
  56      =2  sbit TF0   = TCON^5;
  57      =2  sbit TR0   = TCON^4;
  58      =2  sbit IE1   = TCON^3;
  59      =2  sbit IT1   = TCON^2;
  60      =2  sbit IE0   = TCON^1;
  61      =2  sbit IT0   = TCON^0;
  62      =2  
  63      =2  /*  IE  */
  64      =2  sbit EA    = IE^7;
  65      =2  sbit ET2   = IE^5; //8052 only
  66      =2  sbit ES    = IE^4;
  67      =2  sbit ET1   = IE^3;
  68      =2  sbit EX1   = IE^2;
  69      =2  sbit ET0   = IE^1;
  70      =2  sbit EX0   = IE^0;
  71      =2  
  72      =2  /*  IP  */
  73      =2  sbit PT2   = IP^5;
  74      =2  sbit PS    = IP^4;
  75      =2  sbit PT1   = IP^3;
  76      =2  sbit PX1   = IP^2;
  77      =2  sbit PT0   = IP^1;
  78      =2  sbit PX0   = IP^0;
  79      =2  
  80      =2  /*  P3  */
  81      =2  sbit RD    = P3^7;
  82      =2  sbit WR    = P3^6;
  83      =2  sbit T1    = P3^5;
  84      =2  sbit T0    = P3^4;
  85      =2  sbit INT1  = P3^3;
  86      =2  sbit INT0  = P3^2;
  87      =2  sbit TXD   = P3^1;
  88      =2  sbit RXD   = P3^0;
  89      =2  
  90      =2  /*  SCON  */
  91      =2  sbit SM0   = SCON^7;
  92      =2  sbit SM1   = SCON^6;
  93      =2  sbit SM2   = SCON^5;
  94      =2  sbit REN   = SCON^4;
  95      =2  sbit TB8   = SCON^3;
  96      =2  sbit RB8   = SCON^2;
  97      =2  sbit TI    = SCON^1;
  98      =2  sbit RI    = SCON^0;
  99      =2  
 100      =2  /*  P1  */
 101      =2  sbit T2EX  = P1^1; // 8052 only
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 5   

 102      =2  sbit T2    = P1^0; // 8052 only
 103      =2               
 104      =2  /*  T2CON  */
 105      =2  sbit TF2    = T2CON^7;
 106      =2  sbit EXF2   = T2CON^6;
 107      =2  sbit RCLK   = T2CON^5;
 108      =2  sbit TCLK   = T2CON^4;
 109      =2  sbit EXEN2  = T2CON^3;
 110      =2  sbit TR2    = T2CON^2;
 111      =2  sbit C_T2   = T2CON^1;
 112      =2  sbit CP_RL2 = T2CON^0;
 113      =2  
 114      =2  #endif
   5      =1  
   6      =1  /*$PAGE*/
   7      =1  /*
   8      =1  *********************************************************************************************************
   9      =1  *                                       FUNCTION PROTOTYPES
  10      =1  *********************************************************************************************************
  11      =1  */
  12      =1  void uart_init(void);
  13      =1  
  14      =1  void uart_data(unsigned char);
  15      =1  
  16      =1  void uart_string(unsigned char []);
  17      =1  
  18      =1  unsigned char uart_rx();
  19      =1  
  20      =1  char* uart_getstring(void) reentrant;
  21      =1  
  22      =1  #endif
  23      =1  
  36          
  37          /*
  38          **********************************************************************************************************
             -****
  39          *                                               VARIABLES
  40          **********************************************************************************************************
             -****
  41          */
  42          
  43          
  44          
  45          // S-Box
  46          // Each value represents 4 bits that the 6-bit input is mapped to.
  47          //
  48          // This is in a different order than you would normally find it in an DES
  49          // reference, so that the sbox lookup is reduced to a single lookup on the
  50          // input byte.
  51          code const uint8_t sbox[256]  =
  52          {
  53              /* S-box 1 */
  54              0xE4, 0xD1, 0x2F, 0xB8, 0x3A, 0x6C, 0x59, 0x07,
  55              0x0F, 0x74, 0xE2, 0xD1, 0xA6, 0xCB, 0x95, 0x38,
  56              0x41, 0xE8, 0xD6, 0x2B, 0xFC, 0x97, 0x3A, 0x50,
  57              0xFC, 0x82, 0x49, 0x17, 0x5B, 0x3E, 0xA0, 0x6D,
  58              /* S-box 2 */
  59              0xF1, 0x8E, 0x6B, 0x34, 0x97, 0x2D, 0xC0, 0x5A,
  60              0x3D, 0x47, 0xF2, 0x8E, 0xC0, 0x1A, 0x69, 0xB5,
  61              0x0E, 0x7B, 0xA4, 0xD1, 0x58, 0xC6, 0x93, 0x2F,
  62              0xD8, 0xA1, 0x3F, 0x42, 0xB6, 0x7C, 0x05, 0xE9,
  63              /* S-box 3 */
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 6   

  64              0xA0, 0x9E, 0x63, 0xF5, 0x1D, 0xC7, 0xB4, 0x28,
  65              0xD7, 0x09, 0x34, 0x6A, 0x28, 0x5E, 0xCB, 0xF1,
  66              0xD6, 0x49, 0x8F, 0x30, 0xB1, 0x2C, 0x5A, 0xE7,
  67              0x1A, 0xD0, 0x69, 0x87, 0x4F, 0xE3, 0xB5, 0x2C,
  68              /* S-box 4 */
  69              0x7D, 0xE3, 0x06, 0x9A, 0x12, 0x85, 0xBC, 0x4F,
  70              0xD8, 0xB5, 0x6F, 0x03, 0x47, 0x2C, 0x1A, 0xE9,
  71              0xA6, 0x90, 0xCB, 0x7D, 0xF1, 0x3E, 0x52, 0x84,
  72              0x3F, 0x06, 0xA1, 0xD8, 0x94, 0x5B, 0xC7, 0x2E,
  73              /* S-box 5 */
  74              0x2C, 0x41, 0x7A, 0xB6, 0x85, 0x3F, 0xD0, 0xE9,
  75              0xEB, 0x2C, 0x47, 0xD1, 0x50, 0xFA, 0x39, 0x86,
  76              0x42, 0x1B, 0xAD, 0x78, 0xF9, 0xC5, 0x63, 0x0E,
  77              0xB8, 0xC7, 0x1E, 0x2D, 0x6F, 0x09, 0xA4, 0x53,
  78              /* S-box 6 */
  79              0xC1, 0xAF, 0x92, 0x68, 0x0D, 0x34, 0xE7, 0x5B,
  80              0xAF, 0x42, 0x7C, 0x95, 0x61, 0xDE, 0x0B, 0x38,
  81              0x9E, 0xF5, 0x28, 0xC3, 0x70, 0x4A, 0x1D, 0xB6,
  82              0x43, 0x2C, 0x95, 0xFA, 0xBE, 0x17, 0x60, 0x8D,
  83              /* S-box 7 */
  84              0x4B, 0x2E, 0xF0, 0x8D, 0x3C, 0x97, 0x5A, 0x61,
  85              0xD0, 0xB7, 0x49, 0x1A, 0xE3, 0x5C, 0x2F, 0x86,
  86              0x14, 0xBD, 0xC3, 0x7E, 0xAF, 0x68, 0x05, 0x92,
  87              0x6B, 0xD8, 0x14, 0xA7, 0x95, 0x0F, 0xE2, 0x3C,
  88              /* S-box 8 */
  89              0xD2, 0x84, 0x6F, 0xB1, 0xA9, 0x3E, 0x50, 0xC7,
  90              0x1F, 0xD8, 0xA3, 0x74, 0xC5, 0x6B, 0x0E, 0x92,
  91              0x7B, 0x41, 0x9C, 0xE2, 0x06, 0xAD, 0xF3, 0x58,
  92              0x21, 0xE7, 0x4A, 0x8D, 0xFC, 0x90, 0x35, 0x6B
  93          };
  94          
  95          // Applied to the half-block at the beginning of the Fiestel function.
  96          //expansion_permutation
  97          code const uint8_t e_permtab[]  =
  98          {
  99              4,  6,                                         /* 4 bytes in 6 bytes out*/
 100              32,  1,  2,  3,  4,  5,
 101              4,  5,  6,  7,  8,  9,
 102              8,  9, 10, 11, 12, 13,
 103              12, 13, 14, 15, 16, 17,
 104              16, 17, 18, 19, 20, 21,
 105              20, 21, 22, 23, 24, 25,
 106              24, 25, 26, 27, 28, 29,
 107              28, 29, 30, 31, 32,  1
 108          };
 109          
 110          // Applied at the end of the Feistel function.
 111          code const uint8_t p_permtab[]  =
 112          {
 113              4,  4,                                         /* 32 bit -> 32 bit */
 114              16,  7, 20, 21,
 115              29, 12, 28, 17,
 116              1, 15, 23, 26,
 117              5, 18, 31, 10,
 118              2,  8, 24, 14,
 119              32, 27,  3,  9,
 120              19, 13, 30,  6,
 121              22, 11,  4, 25
 122          };
 123          
 124          // Applied once at the beginning of the algorithm.
 125          code const uint8_t ip_permtab[]  =
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 7   

 126          {
 127              8,  8,                                         /* 64 bit -> 64 bit */
 128              //initial_permutation_left
 129              58, 50, 42, 34, 26, 18, 10, 2,
 130              60, 52, 44, 36, 28, 20, 12, 4,
 131              62, 54, 46, 38, 30, 22, 14, 6,
 132              64, 56, 48, 40, 32, 24, 16, 8,
 133              //initial_permutation_right
 134              57, 49, 41, 33, 25, 17,  9, 1,
 135              59, 51, 43, 35, 27, 19, 11, 3,
 136              61, 53, 45, 37, 29, 21, 13, 5,
 137              63, 55, 47, 39, 31, 23, 15, 7
 138          };
 139          
 140          code const uint8_t inv_ip_permtab[]  =
 141          {
 142              8, 8,                                          /* 64 bit -> 64 bit */
 143              40, 8, 48, 16, 56, 24, 64, 32,
 144              39, 7, 47, 15, 55, 23, 63, 31,
 145              38, 6, 46, 14, 54, 22, 62, 30,
 146              37, 5, 45, 13, 53, 21, 61, 29,
 147              36, 4, 44, 12, 52, 20, 60, 28,
 148              35, 3, 43, 11, 51, 19, 59, 27,
 149              34, 2, 42, 10, 50, 18, 58, 26,
 150              33, 1, 41,  9, 49, 17, 57, 25
 151          };
 152          
 153          // Converts from full 64-bit key to two key halves: left and right.  Only 48
 154          // bits from the original key are used.
 155          code const uint8_t pc1_permtab[]  =
 156          {
 157              8,  7,                                         /* 64 bit -> 56 bit*/
 158              // Left Half
 159              57, 49, 41, 33, 25, 17,  9,
 160              1, 58, 50, 42, 34, 26, 18,
 161              10,  2, 59, 51, 43, 35, 27,
 162              19, 11,  3, 60, 52, 44, 36,
 163              // Right Half
 164              63, 55, 47, 39, 31, 23, 15,
 165              7, 62, 54, 46, 38, 30, 22,
 166              14,  6, 61, 53, 45, 37, 29,
 167              21, 13,  5, 28, 20, 12,  4
 168          };
 169          
 170          // Converts the shifted right and left key halves (concatenated together) into
 171          // the subkey for the round (input into Feistel function).
 172          code const uint8_t pc2_permtab[]  =
 173          {
 174              7,      6,                                     /* 56 bit -> 48 bit */
 175              14, 17, 11, 24,  1,  5,
 176              3, 28, 15,  6, 21, 10,
 177              23, 19, 12,  4, 26,  8,
 178              16,  7, 27, 20, 13,  2,
 179              41, 52, 31, 37, 47, 55,
 180              30, 40, 51, 45, 33, 48,
 181              44, 49, 39, 56, 34, 53,
 182              46, 42, 50, 36, 29, 32
 183          };
 184          
 185          code const uint8_t splitin6bitword_permtab[]  =
 186          {
 187              8,  8,                                         /* 64 bit -> 64 bit */
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 8   

 188              64, 64,  1,  6,  2,  3,  4,  5,
 189              64, 64,  7, 12,  8,  9, 10, 11,
 190              64, 64, 13, 18, 14, 15, 16, 17,
 191              64, 64, 19, 24, 20, 21, 22, 23,
 192              64, 64, 25, 30, 26, 27, 28, 29,
 193              64, 64, 31, 36, 32, 33, 34, 35,
 194              64, 64, 37, 42, 38, 39, 40, 41,
 195              64, 64, 43, 48, 44, 45, 46, 47
 196          };
 197          
 198          code const uint8_t shiftkey_permtab[]  =
 199          {
 200              7,  7,                                         /* 56 bit -> 56 bit */
 201              2,  3,  4,  5,  6,  7,  8,  9,
 202              10, 11, 12, 13, 14, 15, 16, 17,
 203              18, 19, 20, 21, 22, 23, 24, 25,
 204              26, 27, 28,  1,
 205              30, 31, 32, 33, 34, 35, 36, 37,
 206              38, 39, 40, 41, 42, 43, 44, 45,
 207              46, 47, 48, 49, 50, 51, 52, 53,
 208              54, 55, 56, 29
 209          };
 210          
 211          code const uint8_t shiftkeyinv_permtab[]  =
 212          {
 213              7,  7,
 214              28,  1,  2,  3,  4,  5,  6,  7,
 215              8,  9, 10, 11, 12, 13, 14, 15,
 216              16, 17, 18, 19, 20, 21, 22, 23,
 217              24, 25, 26, 27,
 218              56, 29, 30, 31, 32, 33, 34, 35,
 219              36, 37, 38, 39, 40, 41, 42, 43,
 220              44, 45, 46, 47, 48, 49, 50, 51,
 221              52, 53, 54, 55
 222          };
 223          
 224          #define ROTTABLE      0x7EFC
 225          #define ROTTABLE_INV  0x3F7E
 226          
 227          /*$PAGE*/
 228          /*
 229          *********************************************************************************************************
 230          *                                              Permute data
 231          *
 232          * Description: This function is used to obtain the permuted data "out" from input data "in" by table "ptab
             -le"
 233          *
 234          * Arguments  : ptable   is a pointer to the permutaion table to be used.
 235          *              Note     ptable is pointer to a different size array, the first of tow element has the size
 236          *                       of array ,the other element is the permuted data incremented by 1 from the standar
             -d
 237          *
 238          *              in       is a pointer that holds the data before the permutations.
 239          *
 240          *              out      is a pointer that holds the data after the permutation.
 241          *
 242          * Returns    : None     the output is inside the out pointer
 243          *
 244          * Note(s)    :          we take number from ptable to permute bits of "in" with this
 245          *                       example
 246          *                       ptable[3] = 57, so we want to take bit number 57 from data "in"
 247          *                       but "in" described by 8 bytes, so to get the selective by in in[x/8]
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 9   

 248          *                       and get the selective bit by (x%8)
 249          *********************************************************************************************************
 250          */
 251          void permute(const uint8_t *ptable, const uint8_t *in, uint8_t *out) reentrant
 252          {
 253   1          uint8_t ob;         /* in-bytes and out-bytes */
 254   1          uint8_t byte, _bit;  /* counter for bit and byte */
 255   1          ob = ptable[1];     /* take number of bytes from the 2st element for the table */
 256   1          ptable = &ptable[2];            /* ptable pointed to the 3rd element */
 257   1          for(byte=0; byte<ob; byte++)
 258   1          {
 259   2              uint8_t x,t=0;
 260   2              for(_bit=0; _bit<8; ++_bit)
 261   2              {
 262   3                  x = *ptable++ -1 ;      /* decrement table content by 1 for the standard  */
 263   3                  t <<= 1;                /* select next bit  */
 264   3                  if((in[x/8]) & (0x80>>(x%8)) )
 265   3                  {
 266   4                      t|=0x01;
 267   4                  }
 268   3              }
 269   2              out[byte]=t;
 270   2          }
 271   1      }
 272          
 273          /*$PAGE*/
 274          /*
 275          *********************************************************************************************************
 276          *                                              shift key
 277          *
 278          * Description: This function is used to shift key by permute it from the permtab
 279          *
 280          * Arguments  : key is a pointer to the key (54 bit = 7 byte) to be shifted
 281          *
 282          * Returns    : None     the output is inside the key pointer
 283          *********************************************************************************************************
 284          */
 285          void shiftkey(uint8_t *key) reentrant
 286          {
 287   1          uint8_t k[7];
 288   1          memcpy(k, key, 7);                              /* copy the content of array "key" in array "k"  */
 289   1          permute((uint8_t*)shiftkey_permtab, k, key);    /* Shift bytes circularly. */
 290   1      }
 291          
 292          /*$PAGE*/
 293          /*
 294          *********************************************************************************************************
 295          *                                              shift key inverting
 296          *
 297          * Description: This function is used to shift key back by permute it from the permtab
 298          *
 299          * Arguments  : key is a pointer to the key (54 bit = 7 byte) to be shifted
 300          *
 301          * Returns    : None     the output is inside the key pointer
 302          *********************************************************************************************************
 303          */
 304          void shiftkey_inv(uint8_t *key) reentrant
 305          {
 306   1          uint8_t k[7];
 307   1          memcpy(k, key, 7);
 308   1          permute((uint8_t*)shiftkeyinv_permtab, k, key);
 309   1      }
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 10  

 310          
 311          /*$PAGE*/
 312          /*
 313          *********************************************************************************************************
 314          *                                              split in 6 bit words
 315          *
 316          * Description: This function is used to split every 6bit in a byte to use it with S-Box, so this function
 317          *              make data from char data[6]-48bit  to data[8]-64bit
 318          *
 319          * Arguments  : a        is a pointer to uint64_t that contain content of data[6byte].
 320          *
 321          * Returns    : uint64_t this function return a spliced data[8byte]
 322          *********************************************************************************************************
 323          */
 324          void splitin6bitwords(unsigned char a[]) reentrant
 325          {
 326   1          uint8_t ret[8];
 327   1          memcpy(ret, a, 8);
 328   1          permute((uint8_t*)splitin6bitword_permtab, ret, a);
 329   1      }
 330          
 331          /*$PAGE*/
 332          /*
 333          *********************************************************************************************************
 334          *                                              substitute
 335          *
 336          * Description: This function is used to substitute 6 bits to 4 bits by s-box where 1st and 6th bits
 337          *              represent row and 2nd,3rd,4th,5th bits represent the columns
 338          *
 339          * Arguments  : a        is a pointer to array of char[64] that contain the data want to be substituted
 340          *                       ,array position.
 341          *
 342          *              sbp      is a pointer to array of char[256] S-Box that contain the table of data for
 343          *                       substitution.
 344          *
 345          * Returns    : uint32_t this function return the substituted byte
 346          *********************************************************************************************************
 347          */
 348          uint8_t substitute(uint8_t a, uint8_t * sbp) reentrant
 349          {
 350   1          uint8_t x;
 351   1          x = sbp[a>>1];                  /* get the substituted data from S-Box */
 352   1          x = (a&1)?x&0x0F:x>>4;          /* depend on 1st bit, we select LSB or MSB */
 353   1          return x;
 354   1      }
 355          
 356          /*$PAGE*/
 357          /*
 358          *********************************************************************************************************
 359          *                                   DES Feistel"Primary function of DES"
 360          *
 361          * Description: This function is used to apply the Feistel function on right block with key and return
 362          *              the result.
 363          *              note:    Used in encryption and decryption process.
 364          *
 365          * Arguments  : r        is a pointer to array of char[4] that contain the data right block.
 366          *
 367          *              kr       is a pointer to array of char[4] that contain the data key.
 368          *
 369          * Returns    : uint32_t this function return the result of DES Feistel function [32bit]
 370          *********************************************************************************************************
 371          */
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 11  

 372          uint32_t des_f(uint32_t r, uint8_t* kr) reentrant
 373          {
 374   1          uint8_t i;
 375   1          uint32_t t=0,ret;
 376   1          uint64_t _data;
 377   1          uint8_t *sbp; /* sboxpointer */
 378   1      
 379   1          permute((uint8_t*)e_permtab, (uint8_t*)&r, (uint8_t*)&_data);/* Permute EP "Expansion Permutation" tab
             -le with
 380   1                                          input data [right block] "r" and return permuted data in "data[48bit]"
             - */
 381   1          for(i=0; i<7; ++i)
 382   1              ((uint8_t*)&_data)[i] ^= kr[i];      /* XORing data [right block] with key [48bit]*/
 383   1      
 384   1          /* Sbox substitution */
 385   1          splitin6bitwords((uint8_t*)&_data);          /* data before 6-byte --> now 8-byte  */
 386   1          sbp=(uint8_t*)sbox;
 387   1          for(i=0; i<8; ++i)
 388   1          {
 389   2              uint8_t x;
 390   2              x = substitute(((uint8_t*)&_data)[i], sbp);
 391   2              t <<= 4;
 392   2              t |= x;
 393   2              sbp += 32;
 394   2          }
 395   1      
 396   1          permute((uint8_t*)p_permtab,(uint8_t*)&t, (uint8_t*)&ret);
 397   1      
 398   1          return ret;
 399   1      }
 400          
 401          /*$PAGE*/
 402          /*
 403          *********************************************************************************************************
 404          *                                      Encryption function
 405          *
 406          * Description:            This function encrypts a block of 64 bits (8 bytes) with the DES algorithm.
 407          *                     Key expansion is done automatically. The key is 64 bits long, but note that
 408          *                     only 56 bits are used (the LSB of each byte is dropped). The input and output
 409          *                     blocks may overlap.
 410          *
 411          * Arguments  : out    pointer to the block (64 bit = 8 byte) where the ciphertext is written to
 412          *
 413          *              in     pointer to the block (64 bit = 8 byte) where the plaintext is read from
 414          *
 415          *              key    pointer to the key (64 bit = 8 byte)
 416          *
 417          * Returns    : None
 418          *********************************************************************************************************
 419          */
 420          void encrypt(void* out, const void* in, const void* key) reentrant
 421          {
 422   1      #define R (_data.v32[1])
 423   1      #define L (_data.v32[0])
 424   1          uint8_t kr[6],k[7];
 425   1          uint8_t i;
 426   1          union
 427   1          {
 428   1              uint8_t v8[8];
 429   1              uint32_t v32[2];
 430   1          } _data;
 431   1      
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 12  

 432   1          permute((uint8_t*)ip_permtab, (uint8_t*)in, _data.v8);   /* Permute IP "Initial Permutation" table wit
             -h
 433   1                                                                  input data and return permuted data in "v8" */
 434   1          permute((uint8_t*)pc1_permtab, (const uint8_t*)key, k); /* Permute PC1 "Permuted_Choice1" table with
 435   1                                                                  input key and return permuted data in "k" */
 436   1          for(i=0; i<8; ++i)
 437   1          {
 438   2              shiftkey(k);
 439   2      
 440   2              if(i==1||i==2||i==3||i==5||i==6||i==7)          /* filtered from round "zero" and round "four" 1,2
             -,3,5,6,7 */
 441   2                  shiftkey(k);
 442   2              permute((uint8_t*)pc2_permtab, k, kr);
 443   2              L ^= des_f(R, kr);
 444   2              shiftkey(k);
 445   2              if(i==1||i==2||i==3||i==4||i==5||i==6)     /* filtered from round "zero" and round "seven" 1,2,3,4
             -,5,6 */
 446   2                  shiftkey(k);
 447   2      
 448   2              permute((uint8_t*)pc2_permtab, k, kr);
 449   2              R ^= des_f(L, kr);
 450   2          }
 451   1          /* L <-> R*/
 452   1          R ^= L;
 453   1          L ^= R;
 454   1          R ^= L;
 455   1      
 456   1          // Switch back left and right block
 457   1          permute((uint8_t*)inv_ip_permtab, _data.v8, (uint8_t*)out);
 458   1      }
 459          
 460          /*$PAGE*/
 461          /*
 462          *********************************************************************************************************
 463          *                                      Decryption function
 464          *
 465          * Description: This function decrypts a block of 64 bits (8 bytes) with the DES algorithm.
 466          *              Key expansion is done automatically. The key is 64 bits long, but note that
 467          *              only 56 bits are used (the LSB of each byte is dropped). The input and output
 468          *              blocks may overlap.
 469          *
 470          * Arguments  : out    pointer to the block (64 bit = 8 byte) where the plaintext is written to
 471          *
 472          *              in     pointer to the block (64 bit = 8 byte) where the ciphertext is read from
 473          *
 474          *              key    pointer to the key (64 bit = 8 byte)
 475          *
 476          * Returns    : None
 477          *********************************************************************************************************
 478          */
 479          void decrypt(void* out, const void* in, const uint8_t* key) reentrant
 480          {
 481   1          uint8_t kr[6],k[7];
 482   1          union
 483   1          {
 484   1              uint8_t v8[8];
 485   1              uint32_t v32[2];
 486   1          } _data;
 487   1          int8_t i;
 488   1          permute((uint8_t*)ip_permtab, (uint8_t*)in, _data.v8);/* Permute IP "Initial Permutation" table with
 489   1                                                                  input data and return permuted data in "v8" */
 490   1          permute((uint8_t*)pc1_permtab, (const uint8_t*)key, k);/* Permute PC1 "Permuted_Choice1" table with
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 13  

 491   1                                                                  input key and return permuted data in "k" */
 492   1          for(i=7; i>=0; --i)
 493   1          {
 494   2              permute((uint8_t*)pc2_permtab, k, kr);
 495   2              L ^= des_f(R, kr);
 496   2              shiftkey_inv(k);
 497   2              if(ROTTABLE&((1<<((i<<1)+1))) )     /* filtered from round "zero" and round "seven" 1,2,3,4,5,6 */
 498   2                  shiftkey_inv(k);
 499   2      
 500   2              permute((uint8_t*)pc2_permtab, k, kr);
 501   2              R ^= des_f(L, kr);
 502   2              shiftkey_inv(k);
 503   2              if(ROTTABLE&((1<<((i<<1)+0))) )        /* filtered from round "zero" and round "four" 1,2,3,5,6,7 
             -*/
 504   2                  shiftkey_inv(k);
 505   2          }
 506   1          /* L <-> R*/
 507   1          R ^= L;
 508   1          L ^= R;
 509   1          R ^= L;
 510   1          permute((uint8_t*)inv_ip_permtab, _data.v8, (uint8_t*)out);
 511   1      }
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 14  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION L?0044 (BEGIN)
0000         L?0045:
0000 A900        E     MOV     R1,?C_IBP
0002 1500        E     DEC     ?C_IBP
0004 1500        E     DEC     ?C_IBP
0006 1500        E     DEC     ?C_IBP
0008 A800        E     MOV     R0,?C_IBP
000A 7600              MOV     @R0,#00H
000C 08                INC     R0
000D 7600              MOV     @R0,#00H
000F 08                INC     R0
0010 A601              MOV     @R0,AR1
0012 E500        E     MOV     A,?C_IBP
0014 2409              ADD     A,#09H
0016 1500        E     DEC     ?C_IBP
0018 1500        E     DEC     ?C_IBP
001A 1500        E     DEC     ?C_IBP
001C A800        E     MOV     R0,?C_IBP
001E 7600              MOV     @R0,#00H
0020 08                INC     R0
0021 7600              MOV     @R0,#00H
0023 08                INC     R0
0024 F6                MOV     @R0,A
0025 7BFF              MOV     R3,#0FFH
0027 7A00        R     MOV     R2,#HIGH pc2_permtab
0029 7900        R     MOV     R1,#LOW pc2_permtab
             ; FUNCTION _?permute (BEGIN)
                                           ; SOURCE LINE # 251
002B 1500        E     DEC     ?C_IBP
002D 1500        E     DEC     ?C_IBP
002F 1500        E     DEC     ?C_IBP
0031 A800        E     MOV     R0,?C_IBP
0033 A603              MOV     @R0,AR3
0035 08                INC     R0
0036 A602              MOV     @R0,AR2
0038 08                INC     R0
0039 A601              MOV     @R0,AR1
003B E500        E     MOV     A,?C_IBP
003D 24FB              ADD     A,#0FBH
003F F500        E     MOV     ?C_IBP,A
                                           ; SOURCE LINE # 255
0041 2405              ADD     A,#05H
0043 F8                MOV     R0,A
0044 8603              MOV     AR3,@R0
0046 08                INC     R0
0047 E6                MOV     A,@R0
0048 FA                MOV     R2,A
0049 08                INC     R0
004A E6                MOV     A,@R0
004B F9                MOV     R1,A
004C 900001            MOV     DPTR,#01H
004F 120000      E     LCALL   ?C?CLDOPTR
0052 A800        E     MOV     R0,?C_IBP
0054 F6                MOV     @R0,A
                                           ; SOURCE LINE # 256
0055 E9                MOV     A,R1
0056 2402              ADD     A,#02H
0058 F9                MOV     R1,A
0059 E4                CLR     A
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 15  

005A 3A                ADDC    A,R2
005B FA                MOV     R2,A
005C E500        E     MOV     A,?C_IBP
005E 2405              ADD     A,#05H
0060 F8                MOV     R0,A
0061 A603              MOV     @R0,AR3
0063 08                INC     R0
0064 A602              MOV     @R0,AR2
0066 08                INC     R0
0067 A601              MOV     @R0,AR1
                                           ; SOURCE LINE # 257
0069 A800        E     MOV     R0,?C_IBP
006B 08                INC     R0
006C E4                CLR     A
006D F6                MOV     @R0,A
006E         ?C0001:
006E A900        E     MOV     R1,?C_IBP
0070 A800        E     MOV     R0,?C_IBP
0072 08                INC     R0
0073 E6                MOV     A,@R0
0074 C3                CLR     C
0075 97                SUBB    A,@R1
0076 4003              JC      $ + 5H
0078 020000      R     LJMP    ?C0008
                                           ; SOURCE LINE # 258
                                           ; SOURCE LINE # 259
007B E500        E     MOV     A,?C_IBP
007D 2404              ADD     A,#04H
007F F8                MOV     R0,A
0080 E4                CLR     A
0081 F6                MOV     @R0,A
                                           ; SOURCE LINE # 260
0082 A800        E     MOV     R0,?C_IBP
0084 08                INC     R0
0085 08                INC     R0
0086 F6                MOV     @R0,A
0087         ?C0004:
0087 A800        E     MOV     R0,?C_IBP
0089 08                INC     R0
008A 08                INC     R0
008B E6                MOV     A,@R0
008C C3                CLR     C
008D 9408              SUBB    A,#08H
008F 4003              JC      $ + 5H
0091 020000      R     LJMP    ?C0005
                                           ; SOURCE LINE # 261
                                           ; SOURCE LINE # 262
0094 E500        E     MOV     A,?C_IBP
0096 2405              ADD     A,#05H
0098 F8                MOV     R0,A
0099 8603              MOV     AR3,@R0
009B 08                INC     R0
009C 08                INC     R0
009D 06                INC     @R0
009E E6                MOV     A,@R0
009F 18                DEC     R0
00A0 8602              MOV     AR2,@R0
00A2 7001              JNZ     ?C0036
00A4 06                INC     @R0
00A5         ?C0036:
00A5 14                DEC     A
00A6 F9                MOV     R1,A
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 16  

00A7 120000      E     LCALL   ?C?CLDPTR
00AA 14                DEC     A
00AB FF                MOV     R7,A
00AC E500        E     MOV     A,?C_IBP
00AE 2403              ADD     A,#03H
00B0 F8                MOV     R0,A
00B1 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 263
00B3 E500        E     MOV     A,?C_IBP
00B5 2404              ADD     A,#04H
00B7 F8                MOV     R0,A
00B8 C000              PUSH    AR0
00BA E6                MOV     A,@R0
00BB 25E0              ADD     A,ACC
00BD D000              POP     AR0
00BF F6                MOV     @R0,A
                                           ; SOURCE LINE # 264
00C0 E500        E     MOV     A,?C_IBP
00C2 2403              ADD     A,#03H
00C4 F8                MOV     R0,A
00C5 E6                MOV     A,@R0
00C6 FF                MOV     R7,A
00C7 13                RRC     A
00C8 13                RRC     A
00C9 13                RRC     A
00CA 541F              ANL     A,#01FH
00CC FE                MOV     R6,A
00CD E500        E     MOV     A,?C_IBP
00CF 2408              ADD     A,#08H
00D1 F8                MOV     R0,A
00D2 8603              MOV     AR3,@R0
00D4 08                INC     R0
00D5 E6                MOV     A,@R0
00D6 FA                MOV     R2,A
00D7 08                INC     R0
00D8 E6                MOV     A,@R0
00D9 F9                MOV     R1,A
00DA 8E82              MOV     DPL,R6
00DC 758300            MOV     DPH,#00H
00DF 120000      E     LCALL   ?C?CLDOPTR
00E2 FD                MOV     R5,A
00E3 7C00              MOV     R4,#00H
00E5 EF                MOV     A,R7
00E6 5407              ANL     A,#07H
00E8 FF                MOV     R7,A
00E9 7480              MOV     A,#080H
00EB 7E00              MOV     R6,#00H
00ED A807              MOV     R0,AR7
00EF 08                INC     R0
00F0 8006              SJMP    ?C0038
00F2         ?C0037:
00F2 CE                XCH     A,R6
00F3 A2E7              MOV     C,ACC.7
00F5 13                RRC     A
00F6 CE                XCH     A,R6
00F7 13                RRC     A
00F8         ?C0038:
00F8 D8F8              DJNZ    R0,?C0037
00FA FF                MOV     R7,A
00FB EE                MOV     A,R6
00FC 5C                ANL     A,R4
00FD FE                MOV     R6,A
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 17  

00FE EF                MOV     A,R7
00FF 5D                ANL     A,R5
0100 4E                ORL     A,R6
0101 6009              JZ      ?C0006
                                           ; SOURCE LINE # 265
                                           ; SOURCE LINE # 266
0103 E500        E     MOV     A,?C_IBP
0105 2404              ADD     A,#04H
0107 F8                MOV     R0,A
0108 7401              MOV     A,#01H
010A 46                ORL     A,@R0
010B F6                MOV     @R0,A
                                           ; SOURCE LINE # 267
                                           ; SOURCE LINE # 268
010C         ?C0006:
010C A800        E     MOV     R0,?C_IBP
010E 08                INC     R0
010F 08                INC     R0
0110 06                INC     @R0
0111 020000      R     LJMP    ?C0004
0114         ?C0005:
                                           ; SOURCE LINE # 269
0114 E500        E     MOV     A,?C_IBP
0116 2404              ADD     A,#04H
0118 F8                MOV     R0,A
0119 E6                MOV     A,@R0
011A FF                MOV     R7,A
011B E500        E     MOV     A,?C_IBP
011D 240B              ADD     A,#0BH
011F F8                MOV     R0,A
0120 8603              MOV     AR3,@R0
0122 08                INC     R0
0123 E6                MOV     A,@R0
0124 FA                MOV     R2,A
0125 08                INC     R0
0126 E6                MOV     A,@R0
0127 F9                MOV     R1,A
0128 A800        E     MOV     R0,?C_IBP
012A 08                INC     R0
012B E6                MOV     A,@R0
012C F582              MOV     DPL,A
012E 758300            MOV     DPH,#00H
0131 EF                MOV     A,R7
0132 120000      E     LCALL   ?C?CSTOPTR
                                           ; SOURCE LINE # 270
0135 A800        E     MOV     R0,?C_IBP
0137 08                INC     R0
0138 06                INC     @R0
0139 020000      R     LJMP    ?C0001
                                           ; SOURCE LINE # 271
013C         ?C0008:
013C E500        E     MOV     A,?C_IBP
013E 240E              ADD     A,#0EH
0140 F500        E     MOV     ?C_IBP,A
0142 22                RET     
             ; FUNCTION _?permute (END)

             ; FUNCTION L?0048 (BEGIN)
0000         L?0049:
0000 7B00              MOV     R3,#00H
0002 E500        E     MOV     A,?C_IBP
0004 2406              ADD     A,#06H
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 18  

0006 F9                MOV     R1,A
0007 7A00              MOV     R2,#00H
             ; FUNCTION _?shiftkey (BEGIN)
                                           ; SOURCE LINE # 285
0009 1500        E     DEC     ?C_IBP
000B 1500        E     DEC     ?C_IBP
000D 1500        E     DEC     ?C_IBP
000F A800        E     MOV     R0,?C_IBP
0011 A603              MOV     @R0,AR3
0013 08                INC     R0
0014 A602              MOV     @R0,AR2
0016 08                INC     R0
0017 A601              MOV     @R0,AR1
0019 E500        E     MOV     A,?C_IBP
001B 24F9              ADD     A,#0F9H
001D F500        E     MOV     ?C_IBP,A
                                           ; SOURCE LINE # 288
001F 2407              ADD     A,#07H
0021 F8                MOV     R0,A
0022 8603              MOV     AR3,@R0
0024 08                INC     R0
0025 E6                MOV     A,@R0
0026 FA                MOV     R2,A
0027 08                INC     R0
0028 E6                MOV     A,@R0
0029 F9                MOV     R1,A
002A A800        E     MOV     R0,?C_IBP
002C 7C00              MOV     R4,#00H
002E 7D00              MOV     R5,#00H
0030 7E00              MOV     R6,#00H
0032 7F07              MOV     R7,#07H
0034 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 289
0037 E500        E     MOV     A,?C_IBP
0039 2407              ADD     A,#07H
003B F8                MOV     R0,A
003C 8603              MOV     AR3,@R0
003E 08                INC     R0
003F E6                MOV     A,@R0
0040 FA                MOV     R2,A
0041 08                INC     R0
0042 E6                MOV     A,@R0
0043 F9                MOV     R1,A
0044 1500        E     DEC     ?C_IBP
0046 1500        E     DEC     ?C_IBP
0048 1500        E     DEC     ?C_IBP
004A A800        E     MOV     R0,?C_IBP
004C A603              MOV     @R0,AR3
004E 08                INC     R0
004F A602              MOV     @R0,AR2
0051 08                INC     R0
0052 A601              MOV     @R0,AR1
0054 E500        E     MOV     A,?C_IBP
0056 2403              ADD     A,#03H
0058 1500        E     DEC     ?C_IBP
005A 1500        E     DEC     ?C_IBP
005C 1500        E     DEC     ?C_IBP
005E A800        E     MOV     R0,?C_IBP
0060 7600              MOV     @R0,#00H
0062 08                INC     R0
0063 7600              MOV     @R0,#00H
0065 08                INC     R0
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 19  

0066 F6                MOV     @R0,A
0067 7BFF              MOV     R3,#0FFH
0069 7A00        R     MOV     R2,#HIGH shiftkey_permtab
006B 7900        R     MOV     R1,#LOW shiftkey_permtab
006D 120000      R     LCALL   _?permute
                                           ; SOURCE LINE # 290
0070 E500        E     MOV     A,?C_IBP
0072 240A              ADD     A,#0AH
0074 F500        E     MOV     ?C_IBP,A
0076 22                RET     
             ; FUNCTION _?shiftkey (END)

             ; FUNCTION L?0046 (BEGIN)
0000 120000      E     LCALL   ?C?LSTIDATA
0003         L?0047:
0003 7B00              MOV     R3,#00H
0005 E500        E     MOV     A,?C_IBP
0007 2406              ADD     A,#06H
0009 F9                MOV     R1,A
000A 7A00              MOV     R2,#00H
             ; FUNCTION _?shiftkey_inv (BEGIN)
                                           ; SOURCE LINE # 304
000C 1500        E     DEC     ?C_IBP
000E 1500        E     DEC     ?C_IBP
0010 1500        E     DEC     ?C_IBP
0012 A800        E     MOV     R0,?C_IBP
0014 A603              MOV     @R0,AR3
0016 08                INC     R0
0017 A602              MOV     @R0,AR2
0019 08                INC     R0
001A A601              MOV     @R0,AR1
001C E500        E     MOV     A,?C_IBP
001E 24F9              ADD     A,#0F9H
0020 F500        E     MOV     ?C_IBP,A
                                           ; SOURCE LINE # 307
0022 2407              ADD     A,#07H
0024 F8                MOV     R0,A
0025 8603              MOV     AR3,@R0
0027 08                INC     R0
0028 E6                MOV     A,@R0
0029 FA                MOV     R2,A
002A 08                INC     R0
002B E6                MOV     A,@R0
002C F9                MOV     R1,A
002D A800        E     MOV     R0,?C_IBP
002F 7C00              MOV     R4,#00H
0031 7D00              MOV     R5,#00H
0033 7E00              MOV     R6,#00H
0035 7F07              MOV     R7,#07H
0037 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 308
003A E500        E     MOV     A,?C_IBP
003C 2407              ADD     A,#07H
003E F8                MOV     R0,A
003F 8603              MOV     AR3,@R0
0041 08                INC     R0
0042 E6                MOV     A,@R0
0043 FA                MOV     R2,A
0044 08                INC     R0
0045 E6                MOV     A,@R0
0046 F9                MOV     R1,A
0047 1500        E     DEC     ?C_IBP
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 20  

0049 1500        E     DEC     ?C_IBP
004B 1500        E     DEC     ?C_IBP
004D A800        E     MOV     R0,?C_IBP
004F A603              MOV     @R0,AR3
0051 08                INC     R0
0052 A602              MOV     @R0,AR2
0054 08                INC     R0
0055 A601              MOV     @R0,AR1
0057 E500        E     MOV     A,?C_IBP
0059 2403              ADD     A,#03H
005B 1500        E     DEC     ?C_IBP
005D 1500        E     DEC     ?C_IBP
005F 1500        E     DEC     ?C_IBP
0061 A800        E     MOV     R0,?C_IBP
0063 7600              MOV     @R0,#00H
0065 08                INC     R0
0066 7600              MOV     @R0,#00H
0068 08                INC     R0
0069 F6                MOV     @R0,A
006A 7BFF              MOV     R3,#0FFH
006C 7A00        R     MOV     R2,#HIGH shiftkeyinv_permtab
006E 7900        R     MOV     R1,#LOW shiftkeyinv_permtab
0070 120000      R     LCALL   _?permute
                                           ; SOURCE LINE # 309
0073 E500        E     MOV     A,?C_IBP
0075 240A              ADD     A,#0AH
0077 F500        E     MOV     ?C_IBP,A
0079 22                RET     
             ; FUNCTION _?shiftkey_inv (END)

             ; FUNCTION _?splitin6bitwords (BEGIN)
                                           ; SOURCE LINE # 324
0000 1500        E     DEC     ?C_IBP
0002 1500        E     DEC     ?C_IBP
0004 1500        E     DEC     ?C_IBP
0006 A800        E     MOV     R0,?C_IBP
0008 A603              MOV     @R0,AR3
000A 08                INC     R0
000B A602              MOV     @R0,AR2
000D 08                INC     R0
000E A601              MOV     @R0,AR1
0010 E500        E     MOV     A,?C_IBP
0012 24F8              ADD     A,#0F8H
0014 F500        E     MOV     ?C_IBP,A
                                           ; SOURCE LINE # 327
0016 2408              ADD     A,#08H
0018 F8                MOV     R0,A
0019 8603              MOV     AR3,@R0
001B 08                INC     R0
001C E6                MOV     A,@R0
001D FA                MOV     R2,A
001E 08                INC     R0
001F E6                MOV     A,@R0
0020 F9                MOV     R1,A
0021 A800        E     MOV     R0,?C_IBP
0023 7C00              MOV     R4,#00H
0025 7D00              MOV     R5,#00H
0027 7E00              MOV     R6,#00H
0029 7F08              MOV     R7,#08H
002B 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 328
002E E500        E     MOV     A,?C_IBP
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 21  

0030 2408              ADD     A,#08H
0032 F8                MOV     R0,A
0033 8603              MOV     AR3,@R0
0035 08                INC     R0
0036 E6                MOV     A,@R0
0037 FA                MOV     R2,A
0038 08                INC     R0
0039 E6                MOV     A,@R0
003A F9                MOV     R1,A
003B 1500        E     DEC     ?C_IBP
003D 1500        E     DEC     ?C_IBP
003F 1500        E     DEC     ?C_IBP
0041 A800        E     MOV     R0,?C_IBP
0043 A603              MOV     @R0,AR3
0045 08                INC     R0
0046 A602              MOV     @R0,AR2
0048 08                INC     R0
0049 A601              MOV     @R0,AR1
004B E500        E     MOV     A,?C_IBP
004D 2403              ADD     A,#03H
004F 1500        E     DEC     ?C_IBP
0051 1500        E     DEC     ?C_IBP
0053 1500        E     DEC     ?C_IBP
0055 A800        E     MOV     R0,?C_IBP
0057 7600              MOV     @R0,#00H
0059 08                INC     R0
005A 7600              MOV     @R0,#00H
005C 08                INC     R0
005D F6                MOV     @R0,A
005E 7BFF              MOV     R3,#0FFH
0060 7A00        R     MOV     R2,#HIGH splitin6bitword_permtab
0062 7900        R     MOV     R1,#LOW splitin6bitword_permtab
0064 120000      R     LCALL   _?permute
                                           ; SOURCE LINE # 329
0067 E500        E     MOV     A,?C_IBP
0069 240B              ADD     A,#0BH
006B F500        E     MOV     ?C_IBP,A
006D 22                RET     
             ; FUNCTION _?splitin6bitwords (END)

             ; FUNCTION _?substitute (BEGIN)
                                           ; SOURCE LINE # 348
0000 1500        E     DEC     ?C_IBP
0002 1500        E     DEC     ?C_IBP
0004 1500        E     DEC     ?C_IBP
0006 A800        E     MOV     R0,?C_IBP
0008 A603              MOV     @R0,AR3
000A 08                INC     R0
000B A602              MOV     @R0,AR2
000D 08                INC     R0
000E A601              MOV     @R0,AR1
0010 1500        E     DEC     ?C_IBP
0012 A800        E     MOV     R0,?C_IBP
0014 A607              MOV     @R0,AR7
0016 1500        E     DEC     ?C_IBP
                                           ; SOURCE LINE # 351
0018 A800        E     MOV     R0,?C_IBP
001A 08                INC     R0
001B E6                MOV     A,@R0
001C FF                MOV     R7,A
001D C3                CLR     C
001E 13                RRC     A
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 22  

001F FE                MOV     R6,A
0020 A800        E     MOV     R0,?C_IBP
0022 08                INC     R0
0023 08                INC     R0
0024 8603              MOV     AR3,@R0
0026 08                INC     R0
0027 E6                MOV     A,@R0
0028 FA                MOV     R2,A
0029 08                INC     R0
002A E6                MOV     A,@R0
002B F9                MOV     R1,A
002C 8E82              MOV     DPL,R6
002E 758300            MOV     DPH,#00H
0031 120000      E     LCALL   ?C?CLDOPTR
0034 A800        E     MOV     R0,?C_IBP
0036 F6                MOV     @R0,A
                                           ; SOURCE LINE # 352
0037 EF                MOV     A,R7
0038 A800        E     MOV     R0,?C_IBP
003A 30E003            JNB     ACC.0,?C0012
003D E6                MOV     A,@R0
003E 8002              SJMP    ?C0043
0040         ?C0012:
0040 E6                MOV     A,@R0
0041 C4                SWAP    A
0042         ?C0043:
0042 540F              ANL     A,#0FH
0044 FF                MOV     R7,A
0045         ?C0013:
0045 A800        E     MOV     R0,?C_IBP
0047 EF                MOV     A,R7
0048 F6                MOV     @R0,A
                                           ; SOURCE LINE # 353
                                           ; SOURCE LINE # 354
0049         ?C0014:
0049 E500        E     MOV     A,?C_IBP
004B 2405              ADD     A,#05H
004D F500        E     MOV     ?C_IBP,A
004F 22                RET     
             ; FUNCTION _?substitute (END)

             ; FUNCTION _?des_f (BEGIN)
                                           ; SOURCE LINE # 372
0000 1500        E     DEC     ?C_IBP
0002 1500        E     DEC     ?C_IBP
0004 1500        E     DEC     ?C_IBP
0006 A800        E     MOV     R0,?C_IBP
0008 A603              MOV     @R0,AR3
000A 08                INC     R0
000B A602              MOV     @R0,AR2
000D 08                INC     R0
000E A601              MOV     @R0,AR1
0010 E500        E     MOV     A,?C_IBP
0012 24FC              ADD     A,#0FCH
0014 F500        E     MOV     ?C_IBP,A
0016 F8                MOV     R0,A
0017 120000      E     LCALL   ?C?LSTIDATA
001A E500        E     MOV     A,?C_IBP
001C 24EB              ADD     A,#0EBH
001E F500        E     MOV     ?C_IBP,A
                                           ; SOURCE LINE # 375
0020 F8                MOV     R0,A
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 23  

0021 08                INC     R0
0022 120000      E     LCALL   ?C?LSTKIDATA
0025 00                DB      00H
0026 00                DB      00H
0027 00                DB      00H
0028 00                DB      00H
                                           ; SOURCE LINE # 379
0029 E500        E     MOV     A,?C_IBP
002B 2409              ADD     A,#09H
002D 1500        E     DEC     ?C_IBP
002F 1500        E     DEC     ?C_IBP
0031 1500        E     DEC     ?C_IBP
0033 A800        E     MOV     R0,?C_IBP
0035 7600              MOV     @R0,#00H
0037 08                INC     R0
0038 7600              MOV     @R0,#00H
003A 08                INC     R0
003B F6                MOV     @R0,A
003C E500        E     MOV     A,?C_IBP
003E 2418              ADD     A,#018H
0040 1500        E     DEC     ?C_IBP
0042 1500        E     DEC     ?C_IBP
0044 1500        E     DEC     ?C_IBP
0046 A800        E     MOV     R0,?C_IBP
0048 7600              MOV     @R0,#00H
004A 08                INC     R0
004B 7600              MOV     @R0,#00H
004D 08                INC     R0
004E F6                MOV     @R0,A
004F 7BFF              MOV     R3,#0FFH
0051 7A00        R     MOV     R2,#HIGH e_permtab
0053 7900        R     MOV     R1,#LOW e_permtab
0055 120000      R     LCALL   _?permute
                                           ; SOURCE LINE # 381
0058 A800        E     MOV     R0,?C_IBP
005A E4                CLR     A
005B F6                MOV     @R0,A
005C         ?C0015:
005C A800        E     MOV     R0,?C_IBP
005E E6                MOV     A,@R0
005F C3                CLR     C
0060 9407              SUBB    A,#07H
0062 503C              JNC     ?C0016
                                           ; SOURCE LINE # 382
0064 E6                MOV     A,@R0
0065 FF                MOV     R7,A
0066 FD                MOV     R5,A
0067 7B00              MOV     R3,#00H
0069 E500        E     MOV     A,?C_IBP
006B 2409              ADD     A,#09H
006D 2D                ADD     A,R5
006E F9                MOV     R1,A
006F E4                CLR     A
0070 33                RLC     A
0071 FA                MOV     R2,A
0072 C003              PUSH    AR3
0074 C002              PUSH    AR2
0076 C001              PUSH    AR1
0078 120000      E     LCALL   ?C?CLDPTR
007B FE                MOV     R6,A
007C E500        E     MOV     A,?C_IBP
007E 2419              ADD     A,#019H
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 24  

0080 F8                MOV     R0,A
0081 8603              MOV     AR3,@R0
0083 08                INC     R0
0084 E6                MOV     A,@R0
0085 FA                MOV     R2,A
0086 08                INC     R0
0087 E6                MOV     A,@R0
0088 F9                MOV     R1,A
0089 8F82              MOV     DPL,R7
008B 758300            MOV     DPH,#00H
008E 120000      E     LCALL   ?C?CLDOPTR
0091 6E                XRL     A,R6
0092 D001              POP     AR1
0094 D002              POP     AR2
0096 D003              POP     AR3
0098 120000      E     LCALL   ?C?CSTPTR
009B A800        E     MOV     R0,?C_IBP
009D 06                INC     @R0
009E 80BC              SJMP    ?C0015
00A0         ?C0016:
                                           ; SOURCE LINE # 385
00A0 7B00              MOV     R3,#00H
00A2 E500        E     MOV     A,?C_IBP
00A4 2409              ADD     A,#09H
00A6 F9                MOV     R1,A
00A7 7A00              MOV     R2,#00H
00A9 120000      R     LCALL   _?splitin6bitwords
                                           ; SOURCE LINE # 386
00AC E500        E     MOV     A,?C_IBP
00AE 2411              ADD     A,#011H
00B0 F8                MOV     R0,A
00B1 76FF              MOV     @R0,#0FFH
00B3 08                INC     R0
00B4 7600        R     MOV     @R0,#HIGH sbox
00B6 08                INC     R0
00B7 7600        R     MOV     @R0,#LOW sbox
                                           ; SOURCE LINE # 387
00B9 A800        E     MOV     R0,?C_IBP
00BB E4                CLR     A
00BC F6                MOV     @R0,A
00BD         ?C0018:
00BD A800        E     MOV     R0,?C_IBP
00BF E6                MOV     A,@R0
00C0 C3                CLR     C
00C1 9408              SUBB    A,#08H
00C3 5078              JNC     ?C0019
                                           ; SOURCE LINE # 388
                                           ; SOURCE LINE # 390
00C5 E500        E     MOV     A,?C_IBP
00C7 2411              ADD     A,#011H
00C9 F8                MOV     R0,A
00CA 8603              MOV     AR3,@R0
00CC 08                INC     R0
00CD E6                MOV     A,@R0
00CE FA                MOV     R2,A
00CF 08                INC     R0
00D0 E6                MOV     A,@R0
00D1 F9                MOV     R1,A
00D2 C003              PUSH    AR3
00D4 C002              PUSH    AR2
00D6 C001              PUSH    AR1
00D8 A800        E     MOV     R0,?C_IBP
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 25  

00DA E6                MOV     A,@R0
00DB FF                MOV     R7,A
00DC 7B00              MOV     R3,#00H
00DE E500        E     MOV     A,?C_IBP
00E0 2409              ADD     A,#09H
00E2 2F                ADD     A,R7
00E3 F9                MOV     R1,A
00E4 E4                CLR     A
00E5 33                RLC     A
00E6 FA                MOV     R2,A
00E7 120000      E     LCALL   ?C?CLDPTR
00EA FF                MOV     R7,A
00EB D001              POP     AR1
00ED D002              POP     AR2
00EF D003              POP     AR3
00F1 120000      R     LCALL   _?substitute
00F4 E500        E     MOV     A,?C_IBP
00F6 2414              ADD     A,#014H
00F8 F8                MOV     R0,A
00F9 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 391
00FB A800        E     MOV     R0,?C_IBP
00FD 08                INC     R0
00FE C000              PUSH    AR0
0100 120000      E     LCALL   ?C?LLDIDATA
0103 7804              MOV     R0,#04H
0105 120000      E     LCALL   ?C?LSHL
0108 D000              POP     AR0
010A 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 392
010D A800        E     MOV     R0,?C_IBP
010F 08                INC     R0
0110 C000              PUSH    AR0
0112 120000      E     LCALL   ?C?LLDIDATA
0115 C007              PUSH    AR7
0117 E500        E     MOV     A,?C_IBP
0119 2414              ADD     A,#014H
011B F8                MOV     R0,A
011C E6                MOV     A,@R0
011D FB                MOV     R3,A
011E D007              POP     AR7
0120 EF                MOV     A,R7
0121 4B                ORL     A,R3
0122 FF                MOV     R7,A
0123 EC                MOV     A,R4
0124 D000              POP     AR0
0126 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 393
0129 E500        E     MOV     A,?C_IBP
012B 2411              ADD     A,#011H
012D F8                MOV     R0,A
012E 08                INC     R0
012F 08                INC     R0
0130 7420              MOV     A,#020H
0132 26                ADD     A,@R0
0133 F6                MOV     @R0,A
0134 18                DEC     R0
0135 E4                CLR     A
0136 36                ADDC    A,@R0
0137 F6                MOV     @R0,A
                                           ; SOURCE LINE # 394
0138 A800        E     MOV     R0,?C_IBP
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 26  

013A 06                INC     @R0
013B 8080              SJMP    ?C0018
013D         ?C0019:
                                           ; SOURCE LINE # 396
013D E500        E     MOV     A,?C_IBP
013F 2405              ADD     A,#05H
0141 1500        E     DEC     ?C_IBP
0143 1500        E     DEC     ?C_IBP
0145 1500        E     DEC     ?C_IBP
0147 A800        E     MOV     R0,?C_IBP
0149 7600              MOV     @R0,#00H
014B 08                INC     R0
014C 7600              MOV     @R0,#00H
014E 08                INC     R0
014F F6                MOV     @R0,A
0150 E500        E     MOV     A,?C_IBP
0152 2404              ADD     A,#04H
0154 1500        E     DEC     ?C_IBP
0156 1500        E     DEC     ?C_IBP
0158 1500        E     DEC     ?C_IBP
015A A800        E     MOV     R0,?C_IBP
015C 7600              MOV     @R0,#00H
015E 08                INC     R0
015F 7600              MOV     @R0,#00H
0161 08                INC     R0
0162 F6                MOV     @R0,A
0163 7BFF              MOV     R3,#0FFH
0165 7A00        R     MOV     R2,#HIGH p_permtab
0167 7900        R     MOV     R1,#LOW p_permtab
0169 120000      R     LCALL   _?permute
                                           ; SOURCE LINE # 398
016C E500        E     MOV     A,?C_IBP
016E 2405              ADD     A,#05H
0170 F8                MOV     R0,A
0171 120000      E     LCALL   ?C?LLDIDATA
                                           ; SOURCE LINE # 399
0174         ?C0021:
0174 E500        E     MOV     A,?C_IBP
0176 241C              ADD     A,#01CH
0178 F500        E     MOV     ?C_IBP,A
017A 22                RET     
             ; FUNCTION _?des_f (END)

             ; FUNCTION _?encrypt (BEGIN)
                                           ; SOURCE LINE # 420
0000 1500        E     DEC     ?C_IBP
0002 1500        E     DEC     ?C_IBP
0004 1500        E     DEC     ?C_IBP
0006 A800        E     MOV     R0,?C_IBP
0008 A603              MOV     @R0,AR3
000A 08                INC     R0
000B A602              MOV     @R0,AR2
000D 08                INC     R0
000E A601              MOV     @R0,AR1
0010 E500        E     MOV     A,?C_IBP
0012 24EA              ADD     A,#0EAH
0014 F500        E     MOV     ?C_IBP,A
                                           ; SOURCE LINE # 432
0016 240E              ADD     A,#0EH
0018 1500        E     DEC     ?C_IBP
001A 1500        E     DEC     ?C_IBP
001C 1500        E     DEC     ?C_IBP
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 27  

001E A800        E     MOV     R0,?C_IBP
0020 7600              MOV     @R0,#00H
0022 08                INC     R0
0023 7600              MOV     @R0,#00H
0025 08                INC     R0
0026 F6                MOV     @R0,A
0027 E500        E     MOV     A,?C_IBP
0029 241C              ADD     A,#01CH
002B F8                MOV     R0,A
002C 8603              MOV     AR3,@R0
002E 08                INC     R0
002F E6                MOV     A,@R0
0030 FA                MOV     R2,A
0031 08                INC     R0
0032 E6                MOV     A,@R0
0033 F9                MOV     R1,A
0034 1500        E     DEC     ?C_IBP
0036 1500        E     DEC     ?C_IBP
0038 1500        E     DEC     ?C_IBP
003A A800        E     MOV     R0,?C_IBP
003C A603              MOV     @R0,AR3
003E 08                INC     R0
003F A602              MOV     @R0,AR2
0041 08                INC     R0
0042 A601              MOV     @R0,AR1
0044 7BFF              MOV     R3,#0FFH
0046 7A00        R     MOV     R2,#HIGH ip_permtab
0048 7900        R     MOV     R1,#LOW ip_permtab
004A 120000      R     LCALL   _?permute
                                           ; SOURCE LINE # 434
004D E500        E     MOV     A,?C_IBP
004F 2406              ADD     A,#06H
0051 1500        E     DEC     ?C_IBP
0053 1500        E     DEC     ?C_IBP
0055 1500        E     DEC     ?C_IBP
0057 A800        E     MOV     R0,?C_IBP
0059 7600              MOV     @R0,#00H
005B 08                INC     R0
005C 7600              MOV     @R0,#00H
005E 08                INC     R0
005F F6                MOV     @R0,A
0060 E500        E     MOV     A,?C_IBP
0062 241F              ADD     A,#01FH
0064 F8                MOV     R0,A
0065 8603              MOV     AR3,@R0
0067 08                INC     R0
0068 E6                MOV     A,@R0
0069 FA                MOV     R2,A
006A 08                INC     R0
006B E6                MOV     A,@R0
006C F9                MOV     R1,A
006D 1500        E     DEC     ?C_IBP
006F 1500        E     DEC     ?C_IBP
0071 1500        E     DEC     ?C_IBP
0073 A800        E     MOV     R0,?C_IBP
0075 A603              MOV     @R0,AR3
0077 08                INC     R0
0078 A602              MOV     @R0,AR2
007A 08                INC     R0
007B A601              MOV     @R0,AR1
007D 7BFF              MOV     R3,#0FFH
007F 7A00        R     MOV     R2,#HIGH pc1_permtab
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 28  

0081 7900        R     MOV     R1,#LOW pc1_permtab
0083 120000      R     LCALL   _?permute
                                           ; SOURCE LINE # 436
0086 E500        E     MOV     A,?C_IBP
0088 240D              ADD     A,#0DH
008A F8                MOV     R0,A
008B E4                CLR     A
008C F6                MOV     @R0,A
008D         ?C0022:
008D E500        E     MOV     A,?C_IBP
008F 240D              ADD     A,#0DH
0091 F8                MOV     R0,A
0092 E6                MOV     A,@R0
0093 C3                CLR     C
0094 9408              SUBB    A,#08H
0096 4003              JC      $ + 5H
0098 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 437
                                           ; SOURCE LINE # 438
009B 120000      R     LCALL   L?0048
                                           ; SOURCE LINE # 440
009E E500        E     MOV     A,?C_IBP
00A0 240D              ADD     A,#0DH
00A2 F8                MOV     R0,A
00A3 E6                MOV     A,@R0
00A4 FF                MOV     R7,A
00A5 6401              XRL     A,#01H
00A7 6018              JZ      ?C0026
00A9 EF                MOV     A,R7
00AA 6402              XRL     A,#02H
00AC 6013              JZ      ?C0026
00AE EF                MOV     A,R7
00AF 6403              XRL     A,#03H
00B1 600E              JZ      ?C0026
00B3 EF                MOV     A,R7
00B4 6405              XRL     A,#05H
00B6 6009              JZ      ?C0026
00B8 EF                MOV     A,R7
00B9 6406              XRL     A,#06H
00BB 6004              JZ      ?C0026
00BD EF                MOV     A,R7
00BE B40703            CJNE    A,#07H,?C0025
00C1         ?C0026:
                                           ; SOURCE LINE # 441
00C1 120000      R     LCALL   L?0048
00C4         ?C0025:
                                           ; SOURCE LINE # 442
00C4 120000      R     LCALL   L?0044
                                           ; SOURCE LINE # 443
00C7 E500        E     MOV     A,?C_IBP
00C9 240E              ADD     A,#0EH
00CB F8                MOV     R0,A
00CC C000              PUSH    AR0
00CE 120000      E     LCALL   ?C?LLDIDATA
00D1 C004              PUSH    AR4
00D3 C005              PUSH    AR5
00D5 C006              PUSH    AR6
00D7 C007              PUSH    AR7
00D9 7B00              MOV     R3,#00H
00DB A900        E     MOV     R1,?C_IBP
00DD 7A00              MOV     R2,#00H
00DF E500        E     MOV     A,?C_IBP
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 29  

00E1 2412              ADD     A,#012H
00E3 F8                MOV     R0,A
00E4 120000      E     LCALL   ?C?LLDIDATA
00E7 120000      R     LCALL   _?des_f
00EA A804              MOV     R0,AR4
00EC A905              MOV     R1,AR5
00EE AA06              MOV     R2,AR6
00F0 AB07              MOV     R3,AR7
00F2 D007              POP     AR7
00F4 D006              POP     AR6
00F6 D005              POP     AR5
00F8 D004              POP     AR4
00FA EF                MOV     A,R7
00FB 6B                XRL     A,R3
00FC FF                MOV     R7,A
00FD EE                MOV     A,R6
00FE 6A                XRL     A,R2
00FF FE                MOV     R6,A
0100 ED                MOV     A,R5
0101 69                XRL     A,R1
0102 FD                MOV     R5,A
0103 EC                MOV     A,R4
0104 68                XRL     A,R0
0105 FC                MOV     R4,A
0106 D000              POP     AR0
0108 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 444
010B 120000      R     LCALL   L?0049
                                           ; SOURCE LINE # 445
010E E500        E     MOV     A,?C_IBP
0110 240D              ADD     A,#0DH
0112 F8                MOV     R0,A
0113 E6                MOV     A,@R0
0114 FF                MOV     R7,A
0115 6401              XRL     A,#01H
0117 6018              JZ      ?C0028
0119 EF                MOV     A,R7
011A 6402              XRL     A,#02H
011C 6013              JZ      ?C0028
011E EF                MOV     A,R7
011F 6403              XRL     A,#03H
0121 600E              JZ      ?C0028
0123 EF                MOV     A,R7
0124 6404              XRL     A,#04H
0126 6009              JZ      ?C0028
0128 EF                MOV     A,R7
0129 6405              XRL     A,#05H
012B 6004              JZ      ?C0028
012D EF                MOV     A,R7
012E B40603            CJNE    A,#06H,?C0027
0131         ?C0028:
                                           ; SOURCE LINE # 446
0131 120000      R     LCALL   L?0049
0134         ?C0027:
                                           ; SOURCE LINE # 448
0134 120000      R     LCALL   L?0044
                                           ; SOURCE LINE # 449
0137 E500        E     MOV     A,?C_IBP
0139 2412              ADD     A,#012H
013B F8                MOV     R0,A
013C C000              PUSH    AR0
013E 120000      E     LCALL   ?C?LLDIDATA
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 30  

0141 C004              PUSH    AR4
0143 C005              PUSH    AR5
0145 C006              PUSH    AR6
0147 C007              PUSH    AR7
0149 7B00              MOV     R3,#00H
014B A900        E     MOV     R1,?C_IBP
014D 7A00              MOV     R2,#00H
014F E500        E     MOV     A,?C_IBP
0151 240E              ADD     A,#0EH
0153 F8                MOV     R0,A
0154 120000      E     LCALL   ?C?LLDIDATA
0157 120000      R     LCALL   _?des_f
015A A804              MOV     R0,AR4
015C A905              MOV     R1,AR5
015E AA06              MOV     R2,AR6
0160 AB07              MOV     R3,AR7
0162 D007              POP     AR7
0164 D006              POP     AR6
0166 D005              POP     AR5
0168 D004              POP     AR4
016A EF                MOV     A,R7
016B 6B                XRL     A,R3
016C FF                MOV     R7,A
016D EE                MOV     A,R6
016E 6A                XRL     A,R2
016F FE                MOV     R6,A
0170 ED                MOV     A,R5
0171 69                XRL     A,R1
0172 FD                MOV     R5,A
0173 EC                MOV     A,R4
0174 68                XRL     A,R0
0175 FC                MOV     R4,A
0176 D000              POP     AR0
0178 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 450
017B E500        E     MOV     A,?C_IBP
017D 240D              ADD     A,#0DH
017F F8                MOV     R0,A
0180 06                INC     @R0
0181 020000      R     LJMP    ?C0022
0184         ?C0023:
                                           ; SOURCE LINE # 452
0184 E500        E     MOV     A,?C_IBP
0186 2412              ADD     A,#012H
0188 F8                MOV     R0,A
0189 C000              PUSH    AR0
018B 120000      E     LCALL   ?C?LLDIDATA
018E E500        E     MOV     A,?C_IBP
0190 240E              ADD     A,#0EH
0192 F8                MOV     R0,A
0193 120000      E     LCALL   ?C?LLDIDATA0
0196 EF                MOV     A,R7
0197 6B                XRL     A,R3
0198 FF                MOV     R7,A
0199 EE                MOV     A,R6
019A 6A                XRL     A,R2
019B FE                MOV     R6,A
019C ED                MOV     A,R5
019D 69                XRL     A,R1
019E FD                MOV     R5,A
019F EC                MOV     A,R4
01A0 68                XRL     A,R0
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 31  

01A1 FC                MOV     R4,A
01A2 D000              POP     AR0
01A4 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 453
01A7 E500        E     MOV     A,?C_IBP
01A9 240E              ADD     A,#0EH
01AB F8                MOV     R0,A
01AC C000              PUSH    AR0
01AE 120000      E     LCALL   ?C?LLDIDATA
01B1 E500        E     MOV     A,?C_IBP
01B3 2412              ADD     A,#012H
01B5 F8                MOV     R0,A
01B6 120000      E     LCALL   ?C?LLDIDATA0
01B9 EF                MOV     A,R7
01BA 6B                XRL     A,R3
01BB FF                MOV     R7,A
01BC EE                MOV     A,R6
01BD 6A                XRL     A,R2
01BE FE                MOV     R6,A
01BF ED                MOV     A,R5
01C0 69                XRL     A,R1
01C1 FD                MOV     R5,A
01C2 EC                MOV     A,R4
01C3 68                XRL     A,R0
01C4 FC                MOV     R4,A
01C5 D000              POP     AR0
01C7 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 454
01CA E500        E     MOV     A,?C_IBP
01CC 2412              ADD     A,#012H
01CE F8                MOV     R0,A
01CF C000              PUSH    AR0
01D1 120000      E     LCALL   ?C?LLDIDATA
01D4 E500        E     MOV     A,?C_IBP
01D6 240E              ADD     A,#0EH
01D8 F8                MOV     R0,A
01D9 120000      E     LCALL   ?C?LLDIDATA0
01DC EF                MOV     A,R7
01DD 6B                XRL     A,R3
01DE FF                MOV     R7,A
01DF EE                MOV     A,R6
01E0 6A                XRL     A,R2
01E1 FE                MOV     R6,A
01E2 ED                MOV     A,R5
01E3 69                XRL     A,R1
01E4 FD                MOV     R5,A
01E5 EC                MOV     A,R4
01E6 68                XRL     A,R0
01E7 FC                MOV     R4,A
01E8 D000              POP     AR0
01EA 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 457
01ED E500        E     MOV     A,?C_IBP
01EF 2416              ADD     A,#016H
01F1 F8                MOV     R0,A
01F2 8603              MOV     AR3,@R0
01F4 08                INC     R0
01F5 E6                MOV     A,@R0
01F6 FA                MOV     R2,A
01F7 08                INC     R0
01F8 E6                MOV     A,@R0
01F9 F9                MOV     R1,A
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 32  

01FA 1500        E     DEC     ?C_IBP
01FC 1500        E     DEC     ?C_IBP
01FE 1500        E     DEC     ?C_IBP
0200 A800        E     MOV     R0,?C_IBP
0202 A603              MOV     @R0,AR3
0204 08                INC     R0
0205 A602              MOV     @R0,AR2
0207 08                INC     R0
0208 A601              MOV     @R0,AR1
020A E500        E     MOV     A,?C_IBP
020C 2411              ADD     A,#011H
020E 1500        E     DEC     ?C_IBP
0210 1500        E     DEC     ?C_IBP
0212 1500        E     DEC     ?C_IBP
0214 A800        E     MOV     R0,?C_IBP
0216 7600              MOV     @R0,#00H
0218 08                INC     R0
0219 7600              MOV     @R0,#00H
021B 08                INC     R0
021C F6                MOV     @R0,A
021D 7BFF              MOV     R3,#0FFH
021F 7A00        R     MOV     R2,#HIGH inv_ip_permtab
0221 7900        R     MOV     R1,#LOW inv_ip_permtab
0223 120000      R     LCALL   _?permute
                                           ; SOURCE LINE # 458
0226 E500        E     MOV     A,?C_IBP
0228 241F              ADD     A,#01FH
022A F500        E     MOV     ?C_IBP,A
022C 22                RET     
             ; FUNCTION _?encrypt (END)

             ; FUNCTION _?decrypt (BEGIN)
                                           ; SOURCE LINE # 479
0000 1500        E     DEC     ?C_IBP
0002 1500        E     DEC     ?C_IBP
0004 1500        E     DEC     ?C_IBP
0006 A800        E     MOV     R0,?C_IBP
0008 A603              MOV     @R0,AR3
000A 08                INC     R0
000B A602              MOV     @R0,AR2
000D 08                INC     R0
000E A601              MOV     @R0,AR1
0010 E500        E     MOV     A,?C_IBP
0012 24EA              ADD     A,#0EAH
0014 F500        E     MOV     ?C_IBP,A
                                           ; SOURCE LINE # 488
0016 240D              ADD     A,#0DH
0018 1500        E     DEC     ?C_IBP
001A 1500        E     DEC     ?C_IBP
001C 1500        E     DEC     ?C_IBP
001E A800        E     MOV     R0,?C_IBP
0020 7600              MOV     @R0,#00H
0022 08                INC     R0
0023 7600              MOV     @R0,#00H
0025 08                INC     R0
0026 F6                MOV     @R0,A
0027 E500        E     MOV     A,?C_IBP
0029 241C              ADD     A,#01CH
002B F8                MOV     R0,A
002C 8603              MOV     AR3,@R0
002E 08                INC     R0
002F E6                MOV     A,@R0
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 33  

0030 FA                MOV     R2,A
0031 08                INC     R0
0032 E6                MOV     A,@R0
0033 F9                MOV     R1,A
0034 1500        E     DEC     ?C_IBP
0036 1500        E     DEC     ?C_IBP
0038 1500        E     DEC     ?C_IBP
003A A800        E     MOV     R0,?C_IBP
003C A603              MOV     @R0,AR3
003E 08                INC     R0
003F A602              MOV     @R0,AR2
0041 08                INC     R0
0042 A601              MOV     @R0,AR1
0044 7BFF              MOV     R3,#0FFH
0046 7A00        R     MOV     R2,#HIGH ip_permtab
0048 7900        R     MOV     R1,#LOW ip_permtab
004A 120000      R     LCALL   _?permute
                                           ; SOURCE LINE # 490
004D E500        E     MOV     A,?C_IBP
004F 2406              ADD     A,#06H
0051 1500        E     DEC     ?C_IBP
0053 1500        E     DEC     ?C_IBP
0055 1500        E     DEC     ?C_IBP
0057 A800        E     MOV     R0,?C_IBP
0059 7600              MOV     @R0,#00H
005B 08                INC     R0
005C 7600              MOV     @R0,#00H
005E 08                INC     R0
005F F6                MOV     @R0,A
0060 E500        E     MOV     A,?C_IBP
0062 241F              ADD     A,#01FH
0064 F8                MOV     R0,A
0065 8603              MOV     AR3,@R0
0067 08                INC     R0
0068 E6                MOV     A,@R0
0069 FA                MOV     R2,A
006A 08                INC     R0
006B E6                MOV     A,@R0
006C F9                MOV     R1,A
006D 1500        E     DEC     ?C_IBP
006F 1500        E     DEC     ?C_IBP
0071 1500        E     DEC     ?C_IBP
0073 A800        E     MOV     R0,?C_IBP
0075 A603              MOV     @R0,AR3
0077 08                INC     R0
0078 A602              MOV     @R0,AR2
007A 08                INC     R0
007B A601              MOV     @R0,AR1
007D 7BFF              MOV     R3,#0FFH
007F 7A00        R     MOV     R2,#HIGH pc1_permtab
0081 7900        R     MOV     R1,#LOW pc1_permtab
0083 120000      R     LCALL   _?permute
                                           ; SOURCE LINE # 492
0086 E500        E     MOV     A,?C_IBP
0088 2415              ADD     A,#015H
008A F8                MOV     R0,A
008B 7607              MOV     @R0,#07H
008D         ?C0030:
008D E500        E     MOV     A,?C_IBP
008F 2415              ADD     A,#015H
0091 F9                MOV     R1,A
0092 C3                CLR     C
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 34  

0093 E7                MOV     A,@R1
0094 6480              XRL     A,#080H
0096 9480              SUBB    A,#080H
0098 5003              JNC     $ + 5H
009A 020000      R     LJMP    ?C0031
                                           ; SOURCE LINE # 493
                                           ; SOURCE LINE # 494
009D 120000      R     LCALL   L?0045
                                           ; SOURCE LINE # 495
00A0 E500        E     MOV     A,?C_IBP
00A2 240D              ADD     A,#0DH
00A4 F8                MOV     R0,A
00A5 C000              PUSH    AR0
00A7 120000      E     LCALL   ?C?LLDIDATA
00AA C004              PUSH    AR4
00AC C005              PUSH    AR5
00AE C006              PUSH    AR6
00B0 C007              PUSH    AR7
00B2 7B00              MOV     R3,#00H
00B4 A900        E     MOV     R1,?C_IBP
00B6 7A00              MOV     R2,#00H
00B8 E500        E     MOV     A,?C_IBP
00BA 2411              ADD     A,#011H
00BC F8                MOV     R0,A
00BD 120000      E     LCALL   ?C?LLDIDATA
00C0 120000      R     LCALL   _?des_f
00C3 A804              MOV     R0,AR4
00C5 A905              MOV     R1,AR5
00C7 AA06              MOV     R2,AR6
00C9 AB07              MOV     R3,AR7
00CB D007              POP     AR7
00CD D006              POP     AR6
00CF D005              POP     AR5
00D1 D004              POP     AR4
00D3 EF                MOV     A,R7
00D4 6B                XRL     A,R3
00D5 FF                MOV     R7,A
00D6 EE                MOV     A,R6
00D7 6A                XRL     A,R2
00D8 FE                MOV     R6,A
00D9 ED                MOV     A,R5
00DA 69                XRL     A,R1
00DB FD                MOV     R5,A
00DC EC                MOV     A,R4
00DD 68                XRL     A,R0
00DE FC                MOV     R4,A
00DF D000              POP     AR0
                                           ; SOURCE LINE # 496
00E1 120000      R     LCALL   L?0046
                                           ; SOURCE LINE # 497
00E4 E500        E     MOV     A,?C_IBP
00E6 2415              ADD     A,#015H
00E8 F8                MOV     R0,A
00E9 E6                MOV     A,@R0
00EA 25E0              ADD     A,ACC
00EC 04                INC     A
00ED FF                MOV     R7,A
00EE 7401              MOV     A,#01H
00F0 7E00              MOV     R6,#00H
00F2 A807              MOV     R0,AR7
00F4 08                INC     R0
00F5 8005              SJMP    ?C0040
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 35  

00F7         ?C0039:
00F7 C3                CLR     C
00F8 33                RLC     A
00F9 CE                XCH     A,R6
00FA 33                RLC     A
00FB CE                XCH     A,R6
00FC         ?C0040:
00FC D8F9              DJNZ    R0,?C0039
00FE FF                MOV     R7,A
00FF EE                MOV     A,R6
0100 547E              ANL     A,#07EH
0102 FE                MOV     R6,A
0103 EF                MOV     A,R7
0104 54FC              ANL     A,#0FCH
0106 4E                ORL     A,R6
0107 6003              JZ      ?C0033
                                           ; SOURCE LINE # 498
0109 120000      R     LCALL   L?0047
010C         ?C0033:
                                           ; SOURCE LINE # 500
010C 120000      R     LCALL   L?0045
                                           ; SOURCE LINE # 501
010F E500        E     MOV     A,?C_IBP
0111 2411              ADD     A,#011H
0113 F8                MOV     R0,A
0114 C000              PUSH    AR0
0116 120000      E     LCALL   ?C?LLDIDATA
0119 C004              PUSH    AR4
011B C005              PUSH    AR5
011D C006              PUSH    AR6
011F C007              PUSH    AR7
0121 7B00              MOV     R3,#00H
0123 A900        E     MOV     R1,?C_IBP
0125 7A00              MOV     R2,#00H
0127 E500        E     MOV     A,?C_IBP
0129 240D              ADD     A,#0DH
012B F8                MOV     R0,A
012C 120000      E     LCALL   ?C?LLDIDATA
012F 120000      R     LCALL   _?des_f
0132 A804              MOV     R0,AR4
0134 A905              MOV     R1,AR5
0136 AA06              MOV     R2,AR6
0138 AB07              MOV     R3,AR7
013A D007              POP     AR7
013C D006              POP     AR6
013E D005              POP     AR5
0140 D004              POP     AR4
0142 EF                MOV     A,R7
0143 6B                XRL     A,R3
0144 FF                MOV     R7,A
0145 EE                MOV     A,R6
0146 6A                XRL     A,R2
0147 FE                MOV     R6,A
0148 ED                MOV     A,R5
0149 69                XRL     A,R1
014A FD                MOV     R5,A
014B EC                MOV     A,R4
014C 68                XRL     A,R0
014D FC                MOV     R4,A
014E D000              POP     AR0
                                           ; SOURCE LINE # 502
0150 120000      R     LCALL   L?0046
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 36  

                                           ; SOURCE LINE # 503
0153 E500        E     MOV     A,?C_IBP
0155 2415              ADD     A,#015H
0157 F8                MOV     R0,A
0158 E6                MOV     A,@R0
0159 25E0              ADD     A,ACC
015B FF                MOV     R7,A
015C 7401              MOV     A,#01H
015E 7E00              MOV     R6,#00H
0160 A807              MOV     R0,AR7
0162 08                INC     R0
0163 8005              SJMP    ?C0042
0165         ?C0041:
0165 C3                CLR     C
0166 33                RLC     A
0167 CE                XCH     A,R6
0168 33                RLC     A
0169 CE                XCH     A,R6
016A         ?C0042:
016A D8F9              DJNZ    R0,?C0041
016C FF                MOV     R7,A
016D EE                MOV     A,R6
016E 547E              ANL     A,#07EH
0170 FE                MOV     R6,A
0171 EF                MOV     A,R7
0172 54FC              ANL     A,#0FCH
0174 4E                ORL     A,R6
0175 6003              JZ      ?C0032
                                           ; SOURCE LINE # 504
0177 120000      R     LCALL   L?0047
                                           ; SOURCE LINE # 505
017A         ?C0032:
017A E500        E     MOV     A,?C_IBP
017C 2415              ADD     A,#015H
017E F8                MOV     R0,A
017F 16                DEC     @R0
0180 020000      R     LJMP    ?C0030
0183         ?C0031:
                                           ; SOURCE LINE # 507
0183 E500        E     MOV     A,?C_IBP
0185 2411              ADD     A,#011H
0187 F8                MOV     R0,A
0188 C000              PUSH    AR0
018A 120000      E     LCALL   ?C?LLDIDATA
018D E500        E     MOV     A,?C_IBP
018F 240D              ADD     A,#0DH
0191 F8                MOV     R0,A
0192 120000      E     LCALL   ?C?LLDIDATA0
0195 EF                MOV     A,R7
0196 6B                XRL     A,R3
0197 FF                MOV     R7,A
0198 EE                MOV     A,R6
0199 6A                XRL     A,R2
019A FE                MOV     R6,A
019B ED                MOV     A,R5
019C 69                XRL     A,R1
019D FD                MOV     R5,A
019E EC                MOV     A,R4
019F 68                XRL     A,R0
01A0 FC                MOV     R4,A
01A1 D000              POP     AR0
01A3 120000      E     LCALL   ?C?LSTIDATA
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 37  

                                           ; SOURCE LINE # 508
01A6 E500        E     MOV     A,?C_IBP
01A8 240D              ADD     A,#0DH
01AA F8                MOV     R0,A
01AB C000              PUSH    AR0
01AD 120000      E     LCALL   ?C?LLDIDATA
01B0 E500        E     MOV     A,?C_IBP
01B2 2411              ADD     A,#011H
01B4 F8                MOV     R0,A
01B5 120000      E     LCALL   ?C?LLDIDATA0
01B8 EF                MOV     A,R7
01B9 6B                XRL     A,R3
01BA FF                MOV     R7,A
01BB EE                MOV     A,R6
01BC 6A                XRL     A,R2
01BD FE                MOV     R6,A
01BE ED                MOV     A,R5
01BF 69                XRL     A,R1
01C0 FD                MOV     R5,A
01C1 EC                MOV     A,R4
01C2 68                XRL     A,R0
01C3 FC                MOV     R4,A
01C4 D000              POP     AR0
01C6 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 509
01C9 E500        E     MOV     A,?C_IBP
01CB 2411              ADD     A,#011H
01CD F8                MOV     R0,A
01CE C000              PUSH    AR0
01D0 120000      E     LCALL   ?C?LLDIDATA
01D3 E500        E     MOV     A,?C_IBP
01D5 240D              ADD     A,#0DH
01D7 F8                MOV     R0,A
01D8 120000      E     LCALL   ?C?LLDIDATA0
01DB EF                MOV     A,R7
01DC 6B                XRL     A,R3
01DD FF                MOV     R7,A
01DE EE                MOV     A,R6
01DF 6A                XRL     A,R2
01E0 FE                MOV     R6,A
01E1 ED                MOV     A,R5
01E2 69                XRL     A,R1
01E3 FD                MOV     R5,A
01E4 EC                MOV     A,R4
01E5 68                XRL     A,R0
01E6 FC                MOV     R4,A
01E7 D000              POP     AR0
01E9 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 510
01EC E500        E     MOV     A,?C_IBP
01EE 2416              ADD     A,#016H
01F0 F8                MOV     R0,A
01F1 8603              MOV     AR3,@R0
01F3 08                INC     R0
01F4 E6                MOV     A,@R0
01F5 FA                MOV     R2,A
01F6 08                INC     R0
01F7 E6                MOV     A,@R0
01F8 F9                MOV     R1,A
01F9 1500        E     DEC     ?C_IBP
01FB 1500        E     DEC     ?C_IBP
01FD 1500        E     DEC     ?C_IBP
C51 COMPILER V9.02   DES                                                                   07/14/2015 21:40:41 PAGE 38  

01FF A800        E     MOV     R0,?C_IBP
0201 A603              MOV     @R0,AR3
0203 08                INC     R0
0204 A602              MOV     @R0,AR2
0206 08                INC     R0
0207 A601              MOV     @R0,AR1
0209 E500        E     MOV     A,?C_IBP
020B 2410              ADD     A,#010H
020D 1500        E     DEC     ?C_IBP
020F 1500        E     DEC     ?C_IBP
0211 1500        E     DEC     ?C_IBP
0213 A800        E     MOV     R0,?C_IBP
0215 7600              MOV     @R0,#00H
0217 08                INC     R0
0218 7600              MOV     @R0,#00H
021A 08                INC     R0
021B F6                MOV     @R0,A
021C 7BFF              MOV     R3,#0FFH
021E 7A00        R     MOV     R2,#HIGH inv_ip_permtab
0220 7900        R     MOV     R1,#LOW inv_ip_permtab
0222 120000      R     LCALL   _?permute
                                           ; SOURCE LINE # 511
0225 E500        E     MOV     A,?C_IBP
0227 241F              ADD     A,#01FH
0229 F500        E     MOV     ?C_IBP,A
022B 22                RET     
             ; FUNCTION _?decrypt (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2246    ----
   CONSTANT SIZE    =    762    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
